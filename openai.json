[
  {
    "content": "# Operation: List assistants\n\n**Endpoint:** `GET /assistants`\n\n**Tags:** Assistants\n\n\n**Description:**\nReturns a list of assistants.\n\n\n**Parameters:**\n\n- **`limit`** (query, optional, integer): A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n\n- **`order`** (query, optional, string): Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n\n- **`after`** (query, optional, string): A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n\n- **`before`** (query, optional, string): A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "listAssistants",
      "path": "/assistants",
      "method": "GET",
      "summary": "List assistants",
      "tags": [
        "Assistants"
      ]
    }
  },
  {
    "content": "# Operation: Create assistant\n\n**Endpoint:** `POST /assistants`\n\n**Tags:** Assistants\n\n\n**Description:**\nCreate an assistant with a model and instructions.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `model` (N/A): ID of the model to use. You can use the [List models](https://platform.openai.com/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](https://platform.openai.com/docs/models) for descriptions of them.\n- `name` (string): The name of the assistant. The maximum length is 256 characters.\n- `description` (string): The description of the assistant. The maximum length is 512 characters.\n- `instructions` (string): The system instructions that the assistant uses. The maximum length is 256,000 characters.\n- `reasoning_effort` (N/A): No description.\n- `tools` (array): A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.\n- `tool_resources` (object): A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n- `metadata` (N/A): No description.\n- `temperature` (number): What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n- `top_p` (number): An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.\n- `response_format` (N/A): No description.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n**Curl:**\n```curl\ncurl \"https://api.openai.com/v1/assistants\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"OpenAI-Beta: assistants=v2\" \\\n  -d '{\n    \"instructions\": \"You are a personal math tutor. When asked a question, write and run Python code to answer the question.\",\n    \"name\": \"Math Tutor\",\n    \"tools\": [{\"type\": \"code_interpreter\"}],\n    \"model\": \"gpt-4o\"\n  }'\n```\n\n\n**Python:**\n```python\nfrom openai import OpenAI\n\nclient = OpenAI(\n    api_key=\"My API Key\",\n)\nassistant = client.beta.assistants.create(\n    model=\"gpt-4o\",\n)\nprint(assistant.id)\n```\n\n\n**Node.js:**\n```javascript\nimport OpenAI from 'openai';\n\nconst client = new OpenAI({\n  apiKey: 'My API Key',\n});\n\nconst assistant = await client.beta.assistants.create({ model: 'gpt-4o' });\n\nconsole.log(assistant.id);\n```\n\n\n**Go:**\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/openai/openai-go\"\n  \"github.com/openai/openai-go/option\"\n  \"github.com/openai/openai-go/shared\"\n)\n\nfunc main() {\n  client := openai.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  assistant, err := client.Beta.Assistants.New(context.TODO(), openai.BetaAssistantNewParams{\n    Model: shared.ChatModelGPT5,\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", assistant.ID)\n}\n```\n\n\n**Java:**\n```java\npackage com.openai.example;\n\nimport com.openai.client.OpenAIClient;\nimport com.openai.client.okhttp.OpenAIOkHttpClient;\nimport com.openai.models.ChatModel;\nimport com.openai.models.beta.assistants.Assistant;\nimport com.openai.models.beta.assistants.AssistantCreateParams;\n\npublic final class Main {\n    private Main() {}\n\n    public static void main(String[] args) {\n        OpenAIClient client = OpenAIOkHttpClient.fromEnv();\n\n        AssistantCreateParams params = AssistantCreateParams.builder()\n            .model(ChatModel.GPT_5)\n            .build();\n        Assistant assistant = client.beta().assistants().create(params);\n    }\n}\n```\n\n\n**Ruby:**\n```ruby\nrequire \"openai\"\n\nopenai = OpenAI::Client.new(api_key: \"My API Key\")\n\nassistant = openai.beta.assistants.create(model: :\"gpt-5\")\n\nputs(assistant)\n```\n\n\n**Curl:**\n```curl\ncurl https://api.openai.com/v1/assistants \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"OpenAI-Beta: assistants=v2\" \\\n  -d '{\n    \"instructions\": \"You are an HR bot, and you have access to files to answer employee questions about company policies.\",\n    \"tools\": [{\"type\": \"file_search\"}],\n    \"tool_resources\": {\"file_search\": {\"vector_store_ids\": [\"vs_123\"]}},\n    \"model\": \"gpt-4o\"\n  }'\n```\n\n\n**Python:**\n```python\nfrom openai import OpenAI\n\nclient = OpenAI(\n    api_key=\"My API Key\",\n)\nassistant = client.beta.assistants.create(\n    model=\"gpt-4o\",\n)\nprint(assistant.id)\n```\n\n\n**Node.js:**\n```javascript\nimport OpenAI from 'openai';\n\nconst client = new OpenAI({\n  apiKey: 'My API Key',\n});\n\nconst assistant = await client.beta.assistants.create({ model: 'gpt-4o' });\n\nconsole.log(assistant.id);\n```\n\n\n**Go:**\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/openai/openai-go\"\n  \"github.com/openai/openai-go/option\"\n  \"github.com/openai/openai-go/shared\"\n)\n\nfunc main() {\n  client := openai.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  assistant, err := client.Beta.Assistants.New(context.TODO(), openai.BetaAssistantNewParams{\n    Model: shared.ChatModelGPT5,\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", assistant.ID)\n}\n```\n\n\n**Java:**\n```java\npackage com.openai.example;\n\nimport com.openai.client.OpenAIClient;\nimport com.openai.client.okhttp.OpenAIOkHttpClient;\nimport com.openai.models.ChatModel;\nimport com.openai.models.beta.assistants.Assistant;\nimport com.openai.models.beta.assistants.AssistantCreateParams;\n\npublic final class Main {\n    private Main() {}\n\n    public static void main(String[] args) {\n        OpenAIClient client = OpenAIOkHttpClient.fromEnv();\n\n        AssistantCreateParams params = AssistantCreateParams.builder()\n            .model(ChatModel.GPT_5)\n            .build();\n        Assistant assistant = client.beta().assistants().create(params);\n    }\n}\n```\n\n\n**Ruby:**\n```ruby\nrequire \"openai\"\n\nopenai = OpenAI::Client.new(api_key: \"My API Key\")\n\nassistant = openai.beta.assistants.create(model: :\"gpt-5\")\n\nputs(assistant)\n```",
    "metadata": {
      "operationId": "createAssistant",
      "path": "/assistants",
      "method": "POST",
      "summary": "Create assistant",
      "tags": [
        "Assistants"
      ]
    }
  },
  {
    "content": "# Operation: Retrieve assistant\n\n**Endpoint:** `GET /assistants/{assistant_id}`\n\n**Tags:** Assistants\n\n\n**Description:**\nRetrieves an assistant.\n\n\n**Parameters:**\n\n- **`assistant_id`** (path, required, string): The ID of the assistant to retrieve.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "getAssistant",
      "path": "/assistants/{assistant_id}",
      "method": "GET",
      "summary": "Retrieve assistant",
      "tags": [
        "Assistants"
      ]
    }
  },
  {
    "content": "# Operation: Modify assistant\n\n**Endpoint:** `POST /assistants/{assistant_id}`\n\n**Tags:** Assistants\n\n\n**Description:**\nModifies an assistant.\n\n\n**Parameters:**\n\n- **`assistant_id`** (path, required, string): The ID of the assistant to modify.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `model` (N/A): ID of the model to use. You can use the [List models](https://platform.openai.com/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](https://platform.openai.com/docs/models) for descriptions of them.\n- `reasoning_effort` (N/A): No description.\n- `name` (string): The name of the assistant. The maximum length is 256 characters.\n- `description` (string): The description of the assistant. The maximum length is 512 characters.\n- `instructions` (string): The system instructions that the assistant uses. The maximum length is 256,000 characters.\n- `tools` (array): A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.\n- `tool_resources` (object): A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n- `metadata` (N/A): No description.\n- `temperature` (number): What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n- `top_p` (number): An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.\n- `response_format` (N/A): No description.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "modifyAssistant",
      "path": "/assistants/{assistant_id}",
      "method": "POST",
      "summary": "Modify assistant",
      "tags": [
        "Assistants"
      ]
    }
  },
  {
    "content": "# Operation: Delete assistant\n\n**Endpoint:** `DELETE /assistants/{assistant_id}`\n\n**Tags:** Assistants\n\n\n**Description:**\nDelete an assistant.\n\n\n**Parameters:**\n\n- **`assistant_id`** (path, required, string): The ID of the assistant to delete.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "deleteAssistant",
      "path": "/assistants/{assistant_id}",
      "method": "DELETE",
      "summary": "Delete assistant",
      "tags": [
        "Assistants"
      ]
    }
  },
  {
    "content": "# Operation: Create speech\n\n**Endpoint:** `POST /audio/speech`\n\n**Tags:** Audio\n\n\n**Description:**\nGenerates audio from the input text.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `model` (N/A): One of the available [TTS models](https://platform.openai.com/docs/models#tts): `tts-1`, `tts-1-hd` or `gpt-4o-mini-tts`.\n- `input` (string): The text to generate audio for. The maximum length is 4096 characters.\n- `instructions` (string): Control the voice of your generated audio with additional instructions. Does not work with `tts-1` or `tts-1-hd`.\n- `voice` (N/A): The voice to use when generating the audio. Supported voices are `alloy`, `ash`, `ballad`, `coral`, `echo`, `fable`, `onyx`, `nova`, `sage`, `shimmer`, and `verse`. Previews of the voices are available in the [Text to speech guide](https://platform.openai.com/docs/guides/text-to-speech#voice-options).\n- `response_format` (string): The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.\n- `speed` (number): The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default.\n- `stream_format` (string): The format to stream the audio in. Supported formats are `sse` and `audio`. `sse` is not supported for `tts-1` or `tts-1-hd`.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n**Curl:**\n```curl\ncurl https://api.openai.com/v1/audio/speech \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"model\": \"gpt-4o-mini-tts\",\n    \"input\": \"The quick brown fox jumped over the lazy dog.\",\n    \"voice\": \"alloy\"\n  }' \\\n  --output speech.mp3\n```\n\n\n**Python:**\n```python\nfrom openai import OpenAI\n\nclient = OpenAI(\n    api_key=\"My API Key\",\n)\nspeech = client.audio.speech.create(\n    input=\"input\",\n    model=\"string\",\n    voice=\"ash\",\n)\nprint(speech)\ncontent = speech.read()\nprint(content)\n```\n\n\n**Javascript:**\n```javascript\nimport fs from \"fs\";\nimport path from \"path\";\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nconst speechFile = path.resolve(\"./speech.mp3\");\n\nasync function main() {\n  const mp3 = await openai.audio.speech.create({\n    model: \"gpt-4o-mini-tts\",\n    voice: \"alloy\",\n    input: \"Today is a wonderful day to build something people love!\",\n  });\n  console.log(speechFile);\n  const buffer = Buffer.from(await mp3.arrayBuffer());\n  await fs.promises.writeFile(speechFile, buffer);\n}\nmain();\n```\n\n\n**Csharp:**\n```csharp\nusing System;\nusing System.IO;\n\nusing OpenAI.Audio;\n\nAudioClient client = new(\n    model: \"gpt-4o-mini-tts\",\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\n);\n\nBinaryData speech = client.GenerateSpeech(\n    text: \"The quick brown fox jumped over the lazy dog.\",\n    voice: GeneratedSpeechVoice.Alloy\n);\n\nusing FileStream stream = File.OpenWrite(\"speech.mp3\");\nspeech.ToStream().CopyTo(stream);\n```\n\n\n**Node.js:**\n```javascript\nimport OpenAI from 'openai';\n\nconst client = new OpenAI({\n  apiKey: 'My API Key',\n});\n\nconst speech = await client.audio.speech.create({ input: 'input', model: 'string', voice: 'ash' });\n\nconsole.log(speech);\n\nconst content = await speech.blob();\nconsole.log(content);\n```\n\n\n**Go:**\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/openai/openai-go\"\n  \"github.com/openai/openai-go/option\"\n)\n\nfunc main() {\n  client := openai.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  speech, err := client.Audio.Speech.New(context.TODO(), openai.AudioSpeechNewParams{\n    Input: \"input\",\n    Model: openai.SpeechModelTTS1,\n    Voice: openai.AudioSpeechNewParamsVoiceAlloy,\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", speech)\n}\n```\n\n\n**Java:**\n```java\npackage com.openai.example;\n\nimport com.openai.client.OpenAIClient;\nimport com.openai.client.okhttp.OpenAIOkHttpClient;\nimport com.openai.core.http.HttpResponse;\nimport com.openai.models.audio.speech.SpeechCreateParams;\nimport com.openai.models.audio.speech.SpeechModel;\n\npublic final class Main {\n    private Main() {}\n\n    public static void main(String[] args) {\n        OpenAIClient client = OpenAIOkHttpClient.fromEnv();\n\n        SpeechCreateParams params = SpeechCreateParams.builder()\n            .input(\"input\")\n            .model(SpeechModel.TTS_1)\n            .voice(SpeechCreateParams.Voice.ALLOY)\n            .build();\n        HttpResponse speech = client.audio().speech().create(params);\n    }\n}\n```\n\n\n**Ruby:**\n```ruby\nrequire \"openai\"\n\nopenai = OpenAI::Client.new(api_key: \"My API Key\")\n\nspeech = openai.audio.speech.create(input: \"input\", model: :\"tts-1\", voice: :alloy)\n\nputs(speech)\n```\n\n\n**Curl:**\n```curl\ncurl https://api.openai.com/v1/audio/speech \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"model\": \"gpt-4o-mini-tts\",\n    \"input\": \"The quick brown fox jumped over the lazy dog.\",\n    \"voice\": \"alloy\",\n    \"stream_format\": \"sse\"\n  }'\n```\n\n\n**Node.js:**\n```javascript\nimport OpenAI from 'openai';\n\nconst client = new OpenAI({\n  apiKey: 'My API Key',\n});\n\nconst speech = await client.audio.speech.create({ input: 'input', model: 'string', voice: 'ash' });\n\nconsole.log(speech);\n\nconst content = await speech.blob();\nconsole.log(content);\n```\n\n\n**Python:**\n```python\nfrom openai import OpenAI\n\nclient = OpenAI(\n    api_key=\"My API Key\",\n)\nspeech = client.audio.speech.create(\n    input=\"input\",\n    model=\"string\",\n    voice=\"ash\",\n)\nprint(speech)\ncontent = speech.read()\nprint(content)\n```\n\n\n**Go:**\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/openai/openai-go\"\n  \"github.com/openai/openai-go/option\"\n)\n\nfunc main() {\n  client := openai.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  speech, err := client.Audio.Speech.New(context.TODO(), openai.AudioSpeechNewParams{\n    Input: \"input\",\n    Model: openai.SpeechModelTTS1,\n    Voice: openai.AudioSpeechNewParamsVoiceAlloy,\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", speech)\n}\n```\n\n\n**Java:**\n```java\npackage com.openai.example;\n\nimport com.openai.client.OpenAIClient;\nimport com.openai.client.okhttp.OpenAIOkHttpClient;\nimport com.openai.core.http.HttpResponse;\nimport com.openai.models.audio.speech.SpeechCreateParams;\nimport com.openai.models.audio.speech.SpeechModel;\n\npublic final class Main {\n    private Main() {}\n\n    public static void main(String[] args) {\n        OpenAIClient client = OpenAIOkHttpClient.fromEnv();\n\n        SpeechCreateParams params = SpeechCreateParams.builder()\n            .input(\"input\")\n            .model(SpeechModel.TTS_1)\n            .voice(SpeechCreateParams.Voice.ALLOY)\n            .build();\n        HttpResponse speech = client.audio().speech().create(params);\n    }\n}\n```\n\n\n**Ruby:**\n```ruby\nrequire \"openai\"\n\nopenai = OpenAI::Client.new(api_key: \"My API Key\")\n\nspeech = openai.audio.speech.create(input: \"input\", model: :\"tts-1\", voice: :alloy)\n\nputs(speech)\n```",
    "metadata": {
      "operationId": "createSpeech",
      "path": "/audio/speech",
      "method": "POST",
      "summary": "Create speech",
      "tags": [
        "Audio"
      ]
    }
  },
  {
    "content": "# Operation: Create translation\n\n**Endpoint:** `POST /audio/translations`\n\n**Tags:** Audio\n\n\n**Description:**\nTranslates audio into English.\n\n\n**Request Body:**\n\nThe request body is a `multipart/form-data` object with the following key properties:\n- `file` (string): The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n- `model` (N/A): ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.\n- `prompt` (string): An optional text to guide the model's style or continue a previous audio segment. The [prompt](https://platform.openai.com/docs/guides/speech-to-text#prompting) should be in English.\n- `response_format` (string): The format of the output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.\n- `temperature` (number): The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "createTranslation",
      "path": "/audio/translations",
      "method": "POST",
      "summary": "Create translation",
      "tags": [
        "Audio"
      ]
    }
  },
  {
    "content": "# Operation: Create batch\n\n**Endpoint:** `POST /batches`\n\n**Tags:** Batch\n\n\n**Description:**\nCreates and executes a batch from an uploaded file of requests\n\n\n**Request Body:**\n\nA `application/json` object is required.\n\n\n**Successful Response (200 OK):**\nBatch created successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "createBatch",
      "path": "/batches",
      "method": "POST",
      "summary": "Create batch",
      "tags": [
        "Batch"
      ]
    }
  },
  {
    "content": "# Operation: List batch\n\n**Endpoint:** `GET /batches`\n\n**Tags:** Batch\n\n\n**Description:**\nList your organization's batches.\n\n\n**Parameters:**\n\n- **`after`** (query, optional, string): A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n\n- **`limit`** (query, optional, integer): A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n\n\n**Successful Response (200 OK):**\nBatch listed successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "listBatches",
      "path": "/batches",
      "method": "GET",
      "summary": "List batch",
      "tags": [
        "Batch"
      ]
    }
  },
  {
    "content": "# Operation: Retrieve batch\n\n**Endpoint:** `GET /batches/{batch_id}`\n\n**Tags:** Batch\n\n\n**Description:**\nRetrieves a batch.\n\n\n**Parameters:**\n\n- **`batch_id`** (path, required, string): The ID of the batch to retrieve.\n\n\n**Successful Response (200 OK):**\nBatch retrieved successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "retrieveBatch",
      "path": "/batches/{batch_id}",
      "method": "GET",
      "summary": "Retrieve batch",
      "tags": [
        "Batch"
      ]
    }
  },
  {
    "content": "# Operation: Cancel batch\n\n**Endpoint:** `POST /batches/{batch_id}/cancel`\n\n**Tags:** Batch\n\n\n**Description:**\nCancels an in-progress batch. The batch will be in status `cancelling` for up to 10 minutes, before changing to `cancelled`, where it will have partial results (if any) available in the output file.\n\n\n**Parameters:**\n\n- **`batch_id`** (path, required, string): The ID of the batch to cancel.\n\n\n**Successful Response (200 OK):**\nBatch is cancelling. Returns the cancelling batch's details.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "cancelBatch",
      "path": "/batches/{batch_id}/cancel",
      "method": "POST",
      "summary": "Cancel batch",
      "tags": [
        "Batch"
      ]
    }
  },
  {
    "content": "# Operation: List Chat Completions\n\n**Endpoint:** `GET /chat/completions`\n\n**Tags:** Chat\n\n\n**Description:**\nList stored Chat Completions. Only Chat Completions that have been stored\nwith the `store` parameter set to `true` will be returned.\n\n\n**Parameters:**\n\n- **`model`** (query, optional, string): The model used to generate the Chat Completions.\n\n- **`metadata`** (query, optional, string): A list of metadata keys to filter the Chat Completions by. Example: `metadata[key1]=value1&metadata[key2]=value2`\n\n- **`after`** (query, optional, string): Identifier for the last chat completion from the previous pagination request.\n\n- **`limit`** (query, optional, integer): Number of Chat Completions to retrieve.\n\n- **`order`** (query, optional, string): Sort order for Chat Completions by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`.\n\n\n**Successful Response (200 OK):**\nA list of Chat Completions\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "listChatCompletions",
      "path": "/chat/completions",
      "method": "GET",
      "summary": "List Chat Completions",
      "tags": [
        "Chat"
      ]
    }
  },
  {
    "content": "# Operation: Get chat completion\n\n**Endpoint:** `GET /chat/completions/{completion_id}`\n\n**Tags:** Chat\n\n\n**Description:**\nGet a stored chat completion. Only Chat Completions that have been created\nwith the `store` parameter set to `true` will be returned.\n\n\n**Parameters:**\n\n- **`completion_id`** (path, required, string): The ID of the chat completion to retrieve.\n\n\n**Successful Response (200 OK):**\nA chat completion\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "getChatCompletion",
      "path": "/chat/completions/{completion_id}",
      "method": "GET",
      "summary": "Get chat completion",
      "tags": [
        "Chat"
      ]
    }
  },
  {
    "content": "# Operation: Update chat completion\n\n**Endpoint:** `POST /chat/completions/{completion_id}`\n\n**Tags:** Chat\n\n\n**Description:**\nModify a stored chat completion. Only Chat Completions that have been\ncreated with the `store` parameter set to `true` can be modified. Currently,\nthe only supported modification is to update the `metadata` field.\n\n\n**Parameters:**\n\n- **`completion_id`** (path, required, string): The ID of the chat completion to update.\n\n\n**Request Body:**\n\nA `application/json` object is required.\n\n\n**Successful Response (200 OK):**\nA chat completion\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "updateChatCompletion",
      "path": "/chat/completions/{completion_id}",
      "method": "POST",
      "summary": "Update chat completion",
      "tags": [
        "Chat"
      ]
    }
  },
  {
    "content": "# Operation: Delete chat completion\n\n**Endpoint:** `DELETE /chat/completions/{completion_id}`\n\n**Tags:** Chat\n\n\n**Description:**\nDelete a stored chat completion. Only Chat Completions that have been\ncreated with the `store` parameter set to `true` can be deleted.\n\n\n**Parameters:**\n\n- **`completion_id`** (path, required, string): The ID of the chat completion to delete.\n\n\n**Successful Response (200 OK):**\nThe chat completion was deleted successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "deleteChatCompletion",
      "path": "/chat/completions/{completion_id}",
      "method": "DELETE",
      "summary": "Delete chat completion",
      "tags": [
        "Chat"
      ]
    }
  },
  {
    "content": "# Operation: Get chat messages\n\n**Endpoint:** `GET /chat/completions/{completion_id}/messages`\n\n**Tags:** Chat\n\n\n**Description:**\nGet the messages in a stored chat completion. Only Chat Completions that\nhave been created with the `store` parameter set to `true` will be\nreturned.\n\n\n**Parameters:**\n\n- **`completion_id`** (path, required, string): The ID of the chat completion to retrieve messages from.\n\n- **`after`** (query, optional, string): Identifier for the last message from the previous pagination request.\n\n- **`limit`** (query, optional, integer): Number of messages to retrieve.\n\n- **`order`** (query, optional, string): Sort order for messages by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`.\n\n\n**Successful Response (200 OK):**\nA list of messages\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "getChatCompletionMessages",
      "path": "/chat/completions/{completion_id}/messages",
      "method": "GET",
      "summary": "Get chat messages",
      "tags": [
        "Chat"
      ]
    }
  },
  {
    "content": "# Operation: List containers\n\n**Endpoint:** `GET /containers`\n\n\n**Description:**\nList Containers\n\n\n**Parameters:**\n\n- **`limit`** (query, optional, integer): A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n\n- **`order`** (query, optional, string): Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n\n- **`after`** (query, optional, string): A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n\n\n**Successful Response (200 OK):**\nSuccess\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "ListContainers",
      "path": "/containers",
      "method": "GET",
      "summary": "List containers",
      "tags": []
    }
  },
  {
    "content": "# Operation: Create container\n\n**Endpoint:** `POST /containers`\n\n\n**Description:**\nCreate Container\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `name` (string): Name of the container to create.\n- `file_ids` (array): IDs of files to copy to the container.\n- `expires_after` (object): Container expiration time in seconds relative to the 'anchor' time.\n\n\n**Successful Response (200 OK):**\nSuccess\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "CreateContainer",
      "path": "/containers",
      "method": "POST",
      "summary": "Create container",
      "tags": []
    }
  },
  {
    "content": "# Operation: Retrieve container\n\n**Endpoint:** `GET /containers/{container_id}`\n\n\n**Description:**\nRetrieve Container\n\n\n**Parameters:**\n\n- **`container_id`** (path, required, string): No description.\n\n\n**Successful Response (200 OK):**\nSuccess\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "RetrieveContainer",
      "path": "/containers/{container_id}",
      "method": "GET",
      "summary": "Retrieve container",
      "tags": []
    }
  },
  {
    "content": "# Operation: Delete a container\n\n**Endpoint:** `DELETE /containers/{container_id}`\n\n\n**Description:**\nDelete Container\n\n\n**Parameters:**\n\n- **`container_id`** (path, required, string): The ID of the container to delete.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "DeleteContainer",
      "path": "/containers/{container_id}",
      "method": "DELETE",
      "summary": "Delete a container",
      "tags": []
    }
  },
  {
    "content": "# Operation: Create container file\n\n**Endpoint:** `POST /containers/{container_id}/files`\n\n\n**Description:**\nCreate a Container File\n\nYou can send either a multipart/form-data request with the raw file content, or a JSON request with a file ID.\n\n\n**Parameters:**\n\n- **`container_id`** (path, required, string): No description.\n\n\n**Request Body:**\n\nThe request body is a `multipart/form-data` object with the following key properties:\n- `file_id` (string): Name of the file to create.\n- `file` (string): The File object (not file name) to be uploaded.\n\n\n**Successful Response (200 OK):**\nSuccess\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "CreateContainerFile",
      "path": "/containers/{container_id}/files",
      "method": "POST",
      "summary": "Create container file",
      "tags": []
    }
  },
  {
    "content": "# Operation: List container files\n\n**Endpoint:** `GET /containers/{container_id}/files`\n\n\n**Description:**\nList Container files\n\n\n**Parameters:**\n\n- **`container_id`** (path, required, string): No description.\n\n- **`limit`** (query, optional, integer): A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n\n- **`order`** (query, optional, string): Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n\n- **`after`** (query, optional, string): A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n\n\n**Successful Response (200 OK):**\nSuccess\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "ListContainerFiles",
      "path": "/containers/{container_id}/files",
      "method": "GET",
      "summary": "List container files",
      "tags": []
    }
  },
  {
    "content": "# Operation: Retrieve container file\n\n**Endpoint:** `GET /containers/{container_id}/files/{file_id}`\n\n\n**Description:**\nRetrieve Container File\n\n\n**Parameters:**\n\n- **`container_id`** (path, required, string): No description.\n\n- **`file_id`** (path, required, string): No description.\n\n\n**Successful Response (200 OK):**\nSuccess\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "RetrieveContainerFile",
      "path": "/containers/{container_id}/files/{file_id}",
      "method": "GET",
      "summary": "Retrieve container file",
      "tags": []
    }
  },
  {
    "content": "# Operation: Delete a container file\n\n**Endpoint:** `DELETE /containers/{container_id}/files/{file_id}`\n\n\n**Description:**\nDelete Container File\n\n\n**Parameters:**\n\n- **`container_id`** (path, required, string): No description.\n\n- **`file_id`** (path, required, string): No description.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "DeleteContainerFile",
      "path": "/containers/{container_id}/files/{file_id}",
      "method": "DELETE",
      "summary": "Delete a container file",
      "tags": []
    }
  },
  {
    "content": "# Operation: Retrieve container file content\n\n**Endpoint:** `GET /containers/{container_id}/files/{file_id}/content`\n\n\n**Description:**\nRetrieve Container File Content\n\n\n**Parameters:**\n\n- **`container_id`** (path, required, string): No description.\n\n- **`file_id`** (path, required, string): No description.\n\n\n**Successful Response (200 OK):**\nSuccess\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "RetrieveContainerFileContent",
      "path": "/containers/{container_id}/files/{file_id}/content",
      "method": "GET",
      "summary": "Retrieve container file content",
      "tags": []
    }
  },
  {
    "content": "# Operation: Create a conversation\n\n**Endpoint:** `POST /conversations`\n\n**Tags:** Conversations\n\n\n**Description:**\nCreate a conversation.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `metadata` (N/A): Set of 16 key-value pairs that can be attached to an object. Useful for storing additional information about the object in a structured format.\n- `items` (array): Initial items to include in the conversation context. You may add up to 20 items at a time.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n**Curl:**\n```curl\ncurl https://api.openai.com/v1/conversations \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"metadata\": {\"topic\": \"demo\"},\n    \"items\": [\n      {\n        \"type\": \"message\",\n        \"role\": \"user\",\n        \"content\": \"Hello!\"\n      }\n    ]\n  }'\n```\n\n\n**Javascript:**\n```javascript\nimport OpenAI from \"openai\";\nconst client = new OpenAI();\n\nconst conversation = await client.conversations.create({\n  metadata: { topic: \"demo\" },\n  items: [\n    { type: \"message\", role: \"user\", content: \"Hello!\" }\n  ],\n});\nconsole.log(conversation);\n```\n\n\n**Python:**\n```python\nfrom openai import OpenAI\n\nclient = OpenAI(\n    api_key=\"My API Key\",\n)\nconversation = client.conversations.create()\nprint(conversation.id)\n```\n\n\n**Csharp:**\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing OpenAI.Conversations;\n\nOpenAIConversationClient client = new(\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\n);\n\nConversation conversation = client.CreateConversation(\n    new CreateConversationOptions\n    {\n        Metadata = new Dictionary<string, string>\n        {\n            { \"topic\", \"demo\" }\n        },\n        Items =\n        {\n            new ConversationMessageInput\n            {\n                Role = \"user\",\n                Content = \"Hello!\"\n            }\n        }\n    }\n);\nConsole.WriteLine(conversation.Id);\n```\n\n\n**Node.js:**\n```javascript\nimport OpenAI from 'openai';\n\nconst client = new OpenAI({\n  apiKey: 'My API Key',\n});\n\nconst conversation = await client.conversations.create();\n\nconsole.log(conversation.id);\n```\n\n\n**Go:**\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/openai/openai-go\"\n  \"github.com/openai/openai-go/conversations\"\n  \"github.com/openai/openai-go/option\"\n)\n\nfunc main() {\n  client := openai.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  conversation, err := client.Conversations.New(context.TODO(), conversations.ConversationNewParams{\n\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", conversation.ID)\n}\n```\n\n\n**Java:**\n```java\npackage com.openai.example;\n\nimport com.openai.client.OpenAIClient;\nimport com.openai.client.okhttp.OpenAIOkHttpClient;\nimport com.openai.models.conversations.Conversation;\nimport com.openai.models.conversations.ConversationCreateParams;\n\npublic final class Main {\n    private Main() {}\n\n    public static void main(String[] args) {\n        OpenAIClient client = OpenAIOkHttpClient.fromEnv();\n\n        Conversation conversation = client.conversations().create();\n    }\n}\n```\n\n\n**Ruby:**\n```ruby\nrequire \"openai\"\n\nopenai = OpenAI::Client.new(api_key: \"My API Key\")\n\nconversation = openai.conversations.create\n\nputs(conversation)\n```",
    "metadata": {
      "operationId": "createConversation",
      "path": "/conversations",
      "method": "POST",
      "summary": "Create a conversation",
      "tags": [
        "Conversations"
      ]
    }
  },
  {
    "content": "# Operation: Retrieve a conversation\n\n**Endpoint:** `GET /conversations/{conversation_id}`\n\n**Tags:** Conversations\n\n\n**Description:**\nGet a conversation with the given ID.\n\n\n**Parameters:**\n\n- **`conversation_id`** (path, required, string): The ID of the conversation to retrieve.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n**Curl:**\n```curl\ncurl https://api.openai.com/v1/conversations/conv_123 \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\n```\n\n\n**Javascript:**\n```javascript\nimport OpenAI from \"openai\";\nconst client = new OpenAI();\n\nconst conversation = await client.conversations.retrieve(\"conv_123\");\nconsole.log(conversation);\n```\n\n\n**Python:**\n```python\nfrom openai import OpenAI\n\nclient = OpenAI(\n    api_key=\"My API Key\",\n)\nconversation = client.conversations.retrieve(\n    \"conv_123\",\n)\nprint(conversation.id)\n```\n\n\n**Csharp:**\n```csharp\nusing System;\nusing OpenAI.Conversations;\n\nOpenAIConversationClient client = new(\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\n);\n\nConversation conversation = client.GetConversation(\"conv_123\");\nConsole.WriteLine(conversation.Id);\n```\n\n\n**Node.js:**\n```javascript\nimport OpenAI from 'openai';\n\nconst client = new OpenAI({\n  apiKey: 'My API Key',\n});\n\nconst conversation = await client.conversations.retrieve('conv_123');\n\nconsole.log(conversation.id);\n```\n\n\n**Go:**\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/openai/openai-go\"\n  \"github.com/openai/openai-go/option\"\n)\n\nfunc main() {\n  client := openai.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  conversation, err := client.Conversations.Get(context.TODO(), \"conv_123\")\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", conversation.ID)\n}\n```\n\n\n**Java:**\n```java\npackage com.openai.example;\n\nimport com.openai.client.OpenAIClient;\nimport com.openai.client.okhttp.OpenAIOkHttpClient;\nimport com.openai.models.conversations.Conversation;\nimport com.openai.models.conversations.ConversationRetrieveParams;\n\npublic final class Main {\n    private Main() {}\n\n    public static void main(String[] args) {\n        OpenAIClient client = OpenAIOkHttpClient.fromEnv();\n\n        Conversation conversation = client.conversations().retrieve(\"conv_123\");\n    }\n}\n```\n\n\n**Ruby:**\n```ruby\nrequire \"openai\"\n\nopenai = OpenAI::Client.new(api_key: \"My API Key\")\n\nconversation = openai.conversations.retrieve(\"conv_123\")\n\nputs(conversation)\n```",
    "metadata": {
      "operationId": "getConversation",
      "path": "/conversations/{conversation_id}",
      "method": "GET",
      "summary": "Retrieve a conversation",
      "tags": [
        "Conversations"
      ]
    }
  },
  {
    "content": "# Operation: Update a conversation\n\n**Endpoint:** `POST /conversations/{conversation_id}`\n\n**Tags:** Conversations\n\n\n**Description:**\nUpdate a conversation's metadata with the given ID.\n\n\n**Parameters:**\n\n- **`conversation_id`** (path, required, string): The ID of the conversation to update.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `metadata` (N/A): Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard. Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n**Curl:**\n```curl\ncurl https://api.openai.com/v1/conversations/conv_123 \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"metadata\": {\"topic\": \"project-x\"}\n  }'\n```\n\n\n**Javascript:**\n```javascript\nimport OpenAI from \"openai\";\nconst client = new OpenAI();\n\nconst updated = await client.conversations.update(\n  \"conv_123\",\n  { metadata: { topic: \"project-x\" } }\n);\nconsole.log(updated);\n```\n\n\n**Python:**\n```python\nfrom openai import OpenAI\n\nclient = OpenAI(\n    api_key=\"My API Key\",\n)\nconversation = client.conversations.update(\n    conversation_id=\"conv_123\",\n    metadata={\n        \"foo\": \"string\"\n    },\n)\nprint(conversation.id)\n```\n\n\n**Csharp:**\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing OpenAI.Conversations;\n\nOpenAIConversationClient client = new(\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\n);\n\nConversation updated = client.UpdateConversation(\n    conversationId: \"conv_123\",\n    new UpdateConversationOptions\n    {\n        Metadata = new Dictionary<string, string>\n        {\n            { \"topic\", \"project-x\" }\n        }\n    }\n);\nConsole.WriteLine(updated.Id);\n```\n\n\n**Node.js:**\n```javascript\nimport OpenAI from 'openai';\n\nconst client = new OpenAI({\n  apiKey: 'My API Key',\n});\n\nconst conversation = await client.conversations.update('conv_123', { metadata: { foo: 'string' } });\n\nconsole.log(conversation.id);\n```\n\n\n**Go:**\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/openai/openai-go\"\n  \"github.com/openai/openai-go/conversations\"\n  \"github.com/openai/openai-go/option\"\n)\n\nfunc main() {\n  client := openai.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  conversation, err := client.Conversations.Update(\n    context.TODO(),\n    \"conv_123\",\n    conversations.ConversationUpdateParams{\n      Metadata: map[string]string{\n      \"foo\": \"string\",\n      },\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", conversation.ID)\n}\n```\n\n\n**Java:**\n```java\npackage com.openai.example;\n\nimport com.openai.client.OpenAIClient;\nimport com.openai.client.okhttp.OpenAIOkHttpClient;\nimport com.openai.core.JsonValue;\nimport com.openai.models.conversations.Conversation;\nimport com.openai.models.conversations.ConversationUpdateParams;\n\npublic final class Main {\n    private Main() {}\n\n    public static void main(String[] args) {\n        OpenAIClient client = OpenAIOkHttpClient.fromEnv();\n\n        ConversationUpdateParams params = ConversationUpdateParams.builder()\n            .conversationId(\"conv_123\")\n            .metadata(ConversationUpdateParams.Metadata.builder()\n                .putAdditionalProperty(\"foo\", JsonValue.from(\"string\"))\n                .build())\n            .build();\n        Conversation conversation = client.conversations().update(params);\n    }\n}\n```\n\n\n**Ruby:**\n```ruby\nrequire \"openai\"\n\nopenai = OpenAI::Client.new(api_key: \"My API Key\")\n\nconversation = openai.conversations.update(\"conv_123\", metadata: {foo: \"string\"})\n\nputs(conversation)\n```",
    "metadata": {
      "operationId": "updateConversation",
      "path": "/conversations/{conversation_id}",
      "method": "POST",
      "summary": "Update a conversation",
      "tags": [
        "Conversations"
      ]
    }
  },
  {
    "content": "# Operation: Delete a conversation\n\n**Endpoint:** `DELETE /conversations/{conversation_id}`\n\n**Tags:** Conversations\n\n\n**Description:**\nDelete a conversation with the given ID.\n\n\n**Parameters:**\n\n- **`conversation_id`** (path, required, string): The ID of the conversation to delete.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n**Curl:**\n```curl\ncurl -X DELETE https://api.openai.com/v1/conversations/conv_123 \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\n```\n\n\n**Javascript:**\n```javascript\nimport OpenAI from \"openai\";\nconst client = new OpenAI();\n\nconst deleted = await client.conversations.delete(\"conv_123\");\nconsole.log(deleted);\n```\n\n\n**Python:**\n```python\nfrom openai import OpenAI\n\nclient = OpenAI(\n    api_key=\"My API Key\",\n)\nconversation_deleted_resource = client.conversations.delete(\n    \"conv_123\",\n)\nprint(conversation_deleted_resource.id)\n```\n\n\n**Csharp:**\n```csharp\nusing System;\nusing OpenAI.Conversations;\n\nOpenAIConversationClient client = new(\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\n);\n\nDeletedConversation deleted = client.DeleteConversation(\"conv_123\");\nConsole.WriteLine(deleted.Id);\n```\n\n\n**Node.js:**\n```javascript\nimport OpenAI from 'openai';\n\nconst client = new OpenAI({\n  apiKey: 'My API Key',\n});\n\nconst conversationDeletedResource = await client.conversations.delete('conv_123');\n\nconsole.log(conversationDeletedResource.id);\n```\n\n\n**Go:**\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/openai/openai-go\"\n  \"github.com/openai/openai-go/option\"\n)\n\nfunc main() {\n  client := openai.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  conversationDeletedResource, err := client.Conversations.Delete(context.TODO(), \"conv_123\")\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", conversationDeletedResource.ID)\n}\n```\n\n\n**Java:**\n```java\npackage com.openai.example;\n\nimport com.openai.client.OpenAIClient;\nimport com.openai.client.okhttp.OpenAIOkHttpClient;\nimport com.openai.models.conversations.ConversationDeleteParams;\nimport com.openai.models.conversations.ConversationDeletedResource;\n\npublic final class Main {\n    private Main() {}\n\n    public static void main(String[] args) {\n        OpenAIClient client = OpenAIOkHttpClient.fromEnv();\n\n        ConversationDeletedResource conversationDeletedResource = client.conversations().delete(\"conv_123\");\n    }\n}\n```\n\n\n**Ruby:**\n```ruby\nrequire \"openai\"\n\nopenai = OpenAI::Client.new(api_key: \"My API Key\")\n\nconversation_deleted_resource = openai.conversations.delete(\"conv_123\")\n\nputs(conversation_deleted_resource)\n```",
    "metadata": {
      "operationId": "deleteConversation",
      "path": "/conversations/{conversation_id}",
      "method": "DELETE",
      "summary": "Delete a conversation",
      "tags": [
        "Conversations"
      ]
    }
  },
  {
    "content": "# Operation: Create items\n\n**Endpoint:** `POST /conversations/{conversation_id}/items`\n\n**Tags:** Conversations\n\n\n**Description:**\nCreate items in a conversation with the given ID.\n\n\n**Parameters:**\n\n- **`conversation_id`** (path, required, string): The ID of the conversation to add the item to.\n\n- **`include`** (query, optional, array): Additional fields to include in the response. See the `include` parameter for [listing Conversation items above](https://platform.openai.com/docs/api-reference/conversations/list-items#conversations_list_items-include) for more information.\n\n\n**Request Body:**\n\nA `application/json` object is required.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n**Curl:**\n```curl\ncurl https://api.openai.com/v1/conversations/conv_123/items \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"items\": [\n      {\n        \"type\": \"message\",\n        \"role\": \"user\",\n        \"content\": [\n          {\"type\": \"input_text\", \"text\": \"Hello!\"}\n        ]\n      },\n      {\n        \"type\": \"message\",\n        \"role\": \"user\",\n        \"content\": [\n          {\"type\": \"input_text\", \"text\": \"How are you?\"}\n        ]\n      }\n    ]\n  }'\n```\n\n\n**Javascript:**\n```javascript\nimport OpenAI from \"openai\";\nconst client = new OpenAI();\n\nconst items = await client.conversations.items.create(\n  \"conv_123\",\n  {\n    items: [\n      {\n        type: \"message\",\n        role: \"user\",\n        content: [{ type: \"input_text\", text: \"Hello!\" }],\n      },\n      {\n        type: \"message\",\n        role: \"user\",\n        content: [{ type: \"input_text\", text: \"How are you?\" }],\n      },\n    ],\n  }\n);\nconsole.log(items.data);\n```\n\n\n**Python:**\n```python\nfrom openai import OpenAI\n\nclient = OpenAI(\n    api_key=\"My API Key\",\n)\nconversation_item_list = client.conversations.items.create(\n    conversation_id=\"conv_123\",\n    items=[{\n        \"content\": \"string\",\n        \"role\": \"user\",\n    }],\n)\nprint(conversation_item_list.first_id)\n```\n\n\n**Csharp:**\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing OpenAI.Conversations;\n\nOpenAIConversationClient client = new(\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\n);\n\nConversationItemList created = client.ConversationItems.Create(\n    conversationId: \"conv_123\",\n    new CreateConversationItemsOptions\n    {\n        Items = new List<ConversationItem>\n        {\n            new ConversationMessage\n            {\n                Role = \"user\",\n                Content =\n                {\n                    new ConversationInputText { Text = \"Hello!\" }\n                }\n            },\n            new ConversationMessage\n            {\n                Role = \"user\",\n                Content =\n                {\n                    new ConversationInputText { Text = \"How are you?\" }\n                }\n            }\n        }\n    }\n);\nConsole.WriteLine(created.Data.Count);\n```\n\n\n**Node.js:**\n```javascript\nimport OpenAI from 'openai';\n\nconst client = new OpenAI({\n  apiKey: 'My API Key',\n});\n\nconst conversationItemList = await client.conversations.items.create('conv_123', {\n  items: [{ content: 'string', role: 'user' }],\n});\n\nconsole.log(conversationItemList.first_id);\n```\n\n\n**Go:**\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/openai/openai-go\"\n  \"github.com/openai/openai-go/conversations\"\n  \"github.com/openai/openai-go/option\"\n  \"github.com/openai/openai-go/responses\"\n)\n\nfunc main() {\n  client := openai.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  conversationItemList, err := client.Conversations.Items.New(\n    context.TODO(),\n    \"conv_123\",\n    conversations.ItemNewParams{\n      Items: []responses.ResponseInputItemUnionParam{responses.ResponseInputItemUnionParam{\n        OfMessage: &responses.EasyInputMessageParam{\n          Content: responses.EasyInputMessageContentUnionParam{\n            OfString: openai.String(\"string\"),\n          },\n          Role: responses.EasyInputMessageRoleUser,\n        },\n      }},\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", conversationItemList.FirstID)\n}\n```\n\n\n**Java:**\n```java\npackage com.openai.example;\n\nimport com.openai.client.OpenAIClient;\nimport com.openai.client.okhttp.OpenAIOkHttpClient;\nimport com.openai.models.conversations.items.ConversationItemList;\nimport com.openai.models.conversations.items.ItemCreateParams;\nimport com.openai.models.responses.EasyInputMessage;\n\npublic final class Main {\n    private Main() {}\n\n    public static void main(String[] args) {\n        OpenAIClient client = OpenAIOkHttpClient.fromEnv();\n\n        ItemCreateParams params = ItemCreateParams.builder()\n            .conversationId(\"conv_123\")\n            .addItem(EasyInputMessage.builder()\n                .content(\"string\")\n                .role(EasyInputMessage.Role.USER)\n                .build())\n            .build();\n        ConversationItemList conversationItemList = client.conversations().items().create(params);\n    }\n}\n```\n\n\n**Ruby:**\n```ruby\nrequire \"openai\"\n\nopenai = OpenAI::Client.new(api_key: \"My API Key\")\n\nconversation_item_list = openai.conversations.items.create(\"conv_123\", items: [{content: \"string\", role: :user}])\n\nputs(conversation_item_list)\n```",
    "metadata": {
      "operationId": "createConversationItems",
      "path": "/conversations/{conversation_id}/items",
      "method": "POST",
      "summary": "Create items",
      "tags": [
        "Conversations"
      ]
    }
  },
  {
    "content": "# Operation: List items\n\n**Endpoint:** `GET /conversations/{conversation_id}/items`\n\n**Tags:** Conversations\n\n\n**Description:**\nList all items for a conversation with the given ID.\n\n\n**Parameters:**\n\n- **`conversation_id`** (path, required, string): The ID of the conversation to list items for.\n\n- **`limit`** (query, optional, integer): A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n\n- **`order`** (query, optional, string): The order to return the input items in. Default is `desc`. - `asc`: Return the input items in ascending order. - `desc`: Return the input items in descending order.\n\n- **`after`** (query, optional, string): An item ID to list items after, used in pagination.\n\n- **`include`** (query, optional, array): Specify additional output data to include in the model response. Currently supported values are: - `web_search_call.action.sources`: Include the sources of the web search tool call. - `code_interpreter_call.outputs`: Includes the outputs of python code execution in code interpreter tool call items. - `computer_call_output.output.image_url`: Include image urls from the computer call output. - `file_search_call.results`: Include the search results of the file search tool call. - `message.input_image.image_url`: Include image urls from the input message. - `message.output_text.logprobs`: Include logprobs with assistant messages. - `reasoning.encrypted_content`: Includes an encrypted version of reasoning tokens in reasoning item outputs. This enables reasoning items to be used in multi-turn conversations when using the Responses API statelessly (like when the `store` parameter is set to `false`, or when an organization is enrolled in the zero data retention program).\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n**Curl:**\n```curl\ncurl \"https://api.openai.com/v1/conversations/conv_123/items?limit=10\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\n```\n\n\n**Javascript:**\n```javascript\nimport OpenAI from \"openai\";\nconst client = new OpenAI();\n\nconst items = await client.conversations.items.list(\"conv_123\", { limit: 10 });\nconsole.log(items.data);\n```\n\n\n**Python:**\n```python\nfrom openai import OpenAI\n\nclient = OpenAI(\n    api_key=\"My API Key\",\n)\npage = client.conversations.items.list(\n    conversation_id=\"conv_123\",\n)\npage = page.data[0]\nprint(page)\n```\n\n\n**Csharp:**\n```csharp\nusing System;\nusing OpenAI.Conversations;\n\nOpenAIConversationClient client = new(\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\n);\n\nConversationItemList items = client.ConversationItems.List(\n    conversationId: \"conv_123\",\n    new ListConversationItemsOptions { Limit = 10 }\n);\nConsole.WriteLine(items.Data.Count);\n```\n\n\n**Node.js:**\n```javascript\nimport OpenAI from 'openai';\n\nconst client = new OpenAI({\n  apiKey: 'My API Key',\n});\n\n// Automatically fetches more pages as needed.\nfor await (const conversationItem of client.conversations.items.list('conv_123')) {\n  console.log(conversationItem);\n}\n```\n\n\n**Go:**\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/openai/openai-go\"\n  \"github.com/openai/openai-go/conversations\"\n  \"github.com/openai/openai-go/option\"\n)\n\nfunc main() {\n  client := openai.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  page, err := client.Conversations.Items.List(\n    context.TODO(),\n    \"conv_123\",\n    conversations.ItemListParams{\n\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", page)\n}\n```\n\n\n**Java:**\n```java\npackage com.openai.example;\n\nimport com.openai.client.OpenAIClient;\nimport com.openai.client.okhttp.OpenAIOkHttpClient;\nimport com.openai.models.conversations.items.ItemListPage;\nimport com.openai.models.conversations.items.ItemListParams;\n\npublic final class Main {\n    private Main() {}\n\n    public static void main(String[] args) {\n        OpenAIClient client = OpenAIOkHttpClient.fromEnv();\n\n        ItemListPage page = client.conversations().items().list(\"conv_123\");\n    }\n}\n```\n\n\n**Ruby:**\n```ruby\nrequire \"openai\"\n\nopenai = OpenAI::Client.new(api_key: \"My API Key\")\n\npage = openai.conversations.items.list(\"conv_123\")\n\nputs(page)\n```",
    "metadata": {
      "operationId": "listConversationItems",
      "path": "/conversations/{conversation_id}/items",
      "method": "GET",
      "summary": "List items",
      "tags": [
        "Conversations"
      ]
    }
  },
  {
    "content": "# Operation: Retrieve an item\n\n**Endpoint:** `GET /conversations/{conversation_id}/items/{item_id}`\n\n**Tags:** Conversations\n\n\n**Description:**\nGet a single item from a conversation with the given IDs.\n\n\n**Parameters:**\n\n- **`conversation_id`** (path, required, string): The ID of the conversation that contains the item.\n\n- **`item_id`** (path, required, string): The ID of the item to retrieve.\n\n- **`include`** (query, optional, array): Additional fields to include in the response. See the `include` parameter for [listing Conversation items above](https://platform.openai.com/docs/api-reference/conversations/list-items#conversations_list_items-include) for more information.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n**Curl:**\n```curl\ncurl https://api.openai.com/v1/conversations/conv_123/items/msg_abc \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\n```\n\n\n**Javascript:**\n```javascript\nimport OpenAI from \"openai\";\nconst client = new OpenAI();\n\nconst item = await client.conversations.items.retrieve(\n  \"conv_123\",\n  \"msg_abc\"\n);\nconsole.log(item);\n```\n\n\n**Python:**\n```python\nfrom openai import OpenAI\n\nclient = OpenAI(\n    api_key=\"My API Key\",\n)\nconversation_item = client.conversations.items.retrieve(\n    item_id=\"msg_abc\",\n    conversation_id=\"conv_123\",\n)\nprint(conversation_item)\n```\n\n\n**Csharp:**\n```csharp\nusing System;\nusing OpenAI.Conversations;\n\nOpenAIConversationClient client = new(\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\n);\n\nConversationItem item = client.ConversationItems.Get(\n    conversationId: \"conv_123\",\n    itemId: \"msg_abc\"\n);\nConsole.WriteLine(item.Id);\n```\n\n\n**Node.js:**\n```javascript\nimport OpenAI from 'openai';\n\nconst client = new OpenAI({\n  apiKey: 'My API Key',\n});\n\nconst conversationItem = await client.conversations.items.retrieve('msg_abc', {\n  conversation_id: 'conv_123',\n});\n\nconsole.log(conversationItem);\n```\n\n\n**Go:**\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/openai/openai-go\"\n  \"github.com/openai/openai-go/conversations\"\n  \"github.com/openai/openai-go/option\"\n)\n\nfunc main() {\n  client := openai.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  conversationItem, err := client.Conversations.Items.Get(\n    context.TODO(),\n    \"conv_123\",\n    \"msg_abc\",\n    conversations.ItemGetParams{\n\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", conversationItem)\n}\n```\n\n\n**Java:**\n```java\npackage com.openai.example;\n\nimport com.openai.client.OpenAIClient;\nimport com.openai.client.okhttp.OpenAIOkHttpClient;\nimport com.openai.models.conversations.items.ConversationItem;\nimport com.openai.models.conversations.items.ItemRetrieveParams;\n\npublic final class Main {\n    private Main() {}\n\n    public static void main(String[] args) {\n        OpenAIClient client = OpenAIOkHttpClient.fromEnv();\n\n        ItemRetrieveParams params = ItemRetrieveParams.builder()\n            .conversationId(\"conv_123\")\n            .itemId(\"msg_abc\")\n            .build();\n        ConversationItem conversationItem = client.conversations().items().retrieve(params);\n    }\n}\n```\n\n\n**Ruby:**\n```ruby\nrequire \"openai\"\n\nopenai = OpenAI::Client.new(api_key: \"My API Key\")\n\nconversation_item = openai.conversations.items.retrieve(\"msg_abc\", conversation_id: \"conv_123\")\n\nputs(conversation_item)\n```",
    "metadata": {
      "operationId": "getConversationItem",
      "path": "/conversations/{conversation_id}/items/{item_id}",
      "method": "GET",
      "summary": "Retrieve an item",
      "tags": [
        "Conversations"
      ]
    }
  },
  {
    "content": "# Operation: Delete an item\n\n**Endpoint:** `DELETE /conversations/{conversation_id}/items/{item_id}`\n\n**Tags:** Conversations\n\n\n**Description:**\nDelete an item from a conversation with the given IDs.\n\n\n**Parameters:**\n\n- **`conversation_id`** (path, required, string): The ID of the conversation that contains the item.\n\n- **`item_id`** (path, required, string): The ID of the item to delete.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n**Curl:**\n```curl\ncurl -X DELETE https://api.openai.com/v1/conversations/conv_123/items/msg_abc \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\n```\n\n\n**Javascript:**\n```javascript\nimport OpenAI from \"openai\";\nconst client = new OpenAI();\n\nconst conversation = await client.conversations.items.delete(\n  \"conv_123\",\n  \"msg_abc\"\n);\nconsole.log(conversation);\n```\n\n\n**Python:**\n```python\nfrom openai import OpenAI\n\nclient = OpenAI(\n    api_key=\"My API Key\",\n)\nconversation = client.conversations.items.delete(\n    item_id=\"msg_abc\",\n    conversation_id=\"conv_123\",\n)\nprint(conversation.id)\n```\n\n\n**Csharp:**\n```csharp\nusing System;\nusing OpenAI.Conversations;\n\nOpenAIConversationClient client = new(\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\n);\n\nConversation conversation = client.ConversationItems.Delete(\n    conversationId: \"conv_123\",\n    itemId: \"msg_abc\"\n);\nConsole.WriteLine(conversation.Id);\n```\n\n\n**Node.js:**\n```javascript\nimport OpenAI from 'openai';\n\nconst client = new OpenAI({\n  apiKey: 'My API Key',\n});\n\nconst conversation = await client.conversations.items.delete('msg_abc', { conversation_id: 'conv_123' });\n\nconsole.log(conversation.id);\n```\n\n\n**Go:**\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/openai/openai-go\"\n  \"github.com/openai/openai-go/option\"\n)\n\nfunc main() {\n  client := openai.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  conversation, err := client.Conversations.Items.Delete(\n    context.TODO(),\n    \"conv_123\",\n    \"msg_abc\",\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", conversation.ID)\n}\n```\n\n\n**Java:**\n```java\npackage com.openai.example;\n\nimport com.openai.client.OpenAIClient;\nimport com.openai.client.okhttp.OpenAIOkHttpClient;\nimport com.openai.models.conversations.Conversation;\nimport com.openai.models.conversations.items.ItemDeleteParams;\n\npublic final class Main {\n    private Main() {}\n\n    public static void main(String[] args) {\n        OpenAIClient client = OpenAIOkHttpClient.fromEnv();\n\n        ItemDeleteParams params = ItemDeleteParams.builder()\n            .conversationId(\"conv_123\")\n            .itemId(\"msg_abc\")\n            .build();\n        Conversation conversation = client.conversations().items().delete(params);\n    }\n}\n```\n\n\n**Ruby:**\n```ruby\nrequire \"openai\"\n\nopenai = OpenAI::Client.new(api_key: \"My API Key\")\n\nconversation = openai.conversations.items.delete(\"msg_abc\", conversation_id: \"conv_123\")\n\nputs(conversation)\n```",
    "metadata": {
      "operationId": "deleteConversationItem",
      "path": "/conversations/{conversation_id}/items/{item_id}",
      "method": "DELETE",
      "summary": "Delete an item",
      "tags": [
        "Conversations"
      ]
    }
  },
  {
    "content": "# Operation: Create embeddings\n\n**Endpoint:** `POST /embeddings`\n\n**Tags:** Embeddings\n\n\n**Description:**\nCreates an embedding vector representing the input text.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `input` (N/A): Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for all embedding models), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. In addition to the per-input token limit, all embedding models enforce a maximum of 300,000 tokens summed across all inputs in a single request.\n- `model` (N/A): ID of the model to use. You can use the [List models](https://platform.openai.com/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](https://platform.openai.com/docs/models) for descriptions of them.\n- `encoding_format` (string): The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).\n- `dimensions` (integer): The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.\n- `user` (string): A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "createEmbedding",
      "path": "/embeddings",
      "method": "POST",
      "summary": "Create embeddings",
      "tags": [
        "Embeddings"
      ]
    }
  },
  {
    "content": "# Operation: List evals\n\n**Endpoint:** `GET /evals`\n\n**Tags:** Evals\n\n\n**Description:**\nList evaluations for a project.\n\n\n**Parameters:**\n\n- **`after`** (query, optional, string): Identifier for the last eval from the previous pagination request.\n\n- **`limit`** (query, optional, integer): Number of evals to retrieve.\n\n- **`order`** (query, optional, string): Sort order for evals by timestamp. Use `asc` for ascending order or `desc` for descending order.\n\n- **`order_by`** (query, optional, string): Evals can be ordered by creation time or last updated time. Use `created_at` for creation time or `updated_at` for last updated time.\n\n\n**Successful Response (200 OK):**\nA list of evals\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "listEvals",
      "path": "/evals",
      "method": "GET",
      "summary": "List evals",
      "tags": [
        "Evals"
      ]
    }
  },
  {
    "content": "# Operation: Create eval\n\n**Endpoint:** `POST /evals`\n\n**Tags:** Evals\n\n\n**Description:**\nCreate the structure of an evaluation that can be used to test a model's performance.\nAn evaluation is a set of testing criteria and the config for a data source, which dictates the schema of the data used in the evaluation. After creating an evaluation, you can run it on different models and model parameters. We support several types of graders and datasources.\nFor more information, see the [Evals guide](https://platform.openai.com/docs/guides/evals).\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `name` (string): The name of the evaluation.\n- `metadata` (N/A): No description.\n- `data_source_config` (object): The configuration for the data source used for the evaluation runs. Dictates the schema of the data used in the evaluation.\n- `testing_criteria` (array): A list of graders for all eval runs in this group. Graders can reference variables in the data source using double curly braces notation, like `{{item.variable_name}}`. To reference the model's output, use the `sample` namespace (ie, `{{sample.output_text}}`).\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "createEval",
      "path": "/evals",
      "method": "POST",
      "summary": "Create eval",
      "tags": [
        "Evals"
      ]
    }
  },
  {
    "content": "# Operation: Get an eval\n\n**Endpoint:** `GET /evals/{eval_id}`\n\n**Tags:** Evals\n\n\n**Description:**\nGet an evaluation by ID.\n\n\n**Parameters:**\n\n- **`eval_id`** (path, required, string): The ID of the evaluation to retrieve.\n\n\n**Successful Response (200 OK):**\nThe evaluation\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "getEval",
      "path": "/evals/{eval_id}",
      "method": "GET",
      "summary": "Get an eval",
      "tags": [
        "Evals"
      ]
    }
  },
  {
    "content": "# Operation: Update an eval\n\n**Endpoint:** `POST /evals/{eval_id}`\n\n**Tags:** Evals\n\n\n**Description:**\nUpdate certain properties of an evaluation.\n\n\n**Parameters:**\n\n- **`eval_id`** (path, required, string): The ID of the evaluation to update.\n\n\n**Request Body:**\n\nA `application/json` object is required.\n\n\n**Successful Response (200 OK):**\nThe updated evaluation\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "updateEval",
      "path": "/evals/{eval_id}",
      "method": "POST",
      "summary": "Update an eval",
      "tags": [
        "Evals"
      ]
    }
  },
  {
    "content": "# Operation: Delete an eval\n\n**Endpoint:** `DELETE /evals/{eval_id}`\n\n**Tags:** Evals\n\n\n**Description:**\nDelete an evaluation.\n\n\n**Parameters:**\n\n- **`eval_id`** (path, required, string): The ID of the evaluation to delete.\n\n\n**Successful Response (200 OK):**\nSuccessfully deleted the evaluation.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "deleteEval",
      "path": "/evals/{eval_id}",
      "method": "DELETE",
      "summary": "Delete an eval",
      "tags": [
        "Evals"
      ]
    }
  },
  {
    "content": "# Operation: Get eval runs\n\n**Endpoint:** `GET /evals/{eval_id}/runs`\n\n**Tags:** Evals\n\n\n**Description:**\nGet a list of runs for an evaluation.\n\n\n**Parameters:**\n\n- **`eval_id`** (path, required, string): The ID of the evaluation to retrieve runs for.\n\n- **`after`** (query, optional, string): Identifier for the last run from the previous pagination request.\n\n- **`limit`** (query, optional, integer): Number of runs to retrieve.\n\n- **`order`** (query, optional, string): Sort order for runs by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`.\n\n- **`status`** (query, optional, string): Filter runs by status. One of `queued` | `in_progress` | `failed` | `completed` | `canceled`.\n\n\n**Successful Response (200 OK):**\nA list of runs for the evaluation\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "getEvalRuns",
      "path": "/evals/{eval_id}/runs",
      "method": "GET",
      "summary": "Get eval runs",
      "tags": [
        "Evals"
      ]
    }
  },
  {
    "content": "# Operation: Create eval run\n\n**Endpoint:** `POST /evals/{eval_id}/runs`\n\n**Tags:** Evals\n\n\n**Description:**\nKicks off a new run for a given evaluation, specifying the data source, and what model configuration to use to test. The datasource will be validated against the schema specified in the config of the evaluation.\n\n\n**Parameters:**\n\n- **`eval_id`** (path, required, string): The ID of the evaluation to create a run for.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `name` (string): The name of the run.\n- `metadata` (N/A): No description.\n- `data_source` (object): Details about the run's data source.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "createEvalRun",
      "path": "/evals/{eval_id}/runs",
      "method": "POST",
      "summary": "Create eval run",
      "tags": [
        "Evals"
      ]
    }
  },
  {
    "content": "# Operation: Get an eval run\n\n**Endpoint:** `GET /evals/{eval_id}/runs/{run_id}`\n\n**Tags:** Evals\n\n\n**Description:**\nGet an evaluation run by ID.\n\n\n**Parameters:**\n\n- **`eval_id`** (path, required, string): The ID of the evaluation to retrieve runs for.\n\n- **`run_id`** (path, required, string): The ID of the run to retrieve.\n\n\n**Successful Response (200 OK):**\nThe evaluation run\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "getEvalRun",
      "path": "/evals/{eval_id}/runs/{run_id}",
      "method": "GET",
      "summary": "Get an eval run",
      "tags": [
        "Evals"
      ]
    }
  },
  {
    "content": "# Operation: Cancel eval run\n\n**Endpoint:** `POST /evals/{eval_id}/runs/{run_id}`\n\n**Tags:** Evals\n\n\n**Description:**\nCancel an ongoing evaluation run.\n\n\n**Parameters:**\n\n- **`eval_id`** (path, required, string): The ID of the evaluation whose run you want to cancel.\n\n- **`run_id`** (path, required, string): The ID of the run to cancel.\n\n\n**Successful Response (200 OK):**\nThe canceled eval run object\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "cancelEvalRun",
      "path": "/evals/{eval_id}/runs/{run_id}",
      "method": "POST",
      "summary": "Cancel eval run",
      "tags": [
        "Evals"
      ]
    }
  },
  {
    "content": "# Operation: Delete eval run\n\n**Endpoint:** `DELETE /evals/{eval_id}/runs/{run_id}`\n\n**Tags:** Evals\n\n\n**Description:**\nDelete an eval run.\n\n\n**Parameters:**\n\n- **`eval_id`** (path, required, string): The ID of the evaluation to delete the run from.\n\n- **`run_id`** (path, required, string): The ID of the run to delete.\n\n\n**Successful Response (200 OK):**\nSuccessfully deleted the eval run\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "deleteEvalRun",
      "path": "/evals/{eval_id}/runs/{run_id}",
      "method": "DELETE",
      "summary": "Delete eval run",
      "tags": [
        "Evals"
      ]
    }
  },
  {
    "content": "# Operation: Get eval run output items\n\n**Endpoint:** `GET /evals/{eval_id}/runs/{run_id}/output_items`\n\n**Tags:** Evals\n\n\n**Description:**\nGet a list of output items for an evaluation run.\n\n\n**Parameters:**\n\n- **`eval_id`** (path, required, string): The ID of the evaluation to retrieve runs for.\n\n- **`run_id`** (path, required, string): The ID of the run to retrieve output items for.\n\n- **`after`** (query, optional, string): Identifier for the last output item from the previous pagination request.\n\n- **`limit`** (query, optional, integer): Number of output items to retrieve.\n\n- **`status`** (query, optional, string): Filter output items by status. Use `failed` to filter by failed output items or `pass` to filter by passed output items.\n\n- **`order`** (query, optional, string): Sort order for output items by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`.\n\n\n**Successful Response (200 OK):**\nA list of output items for the evaluation run\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "getEvalRunOutputItems",
      "path": "/evals/{eval_id}/runs/{run_id}/output_items",
      "method": "GET",
      "summary": "Get eval run output items",
      "tags": [
        "Evals"
      ]
    }
  },
  {
    "content": "# Operation: Get an output item of an eval run\n\n**Endpoint:** `GET /evals/{eval_id}/runs/{run_id}/output_items/{output_item_id}`\n\n**Tags:** Evals\n\n\n**Description:**\nGet an evaluation run output item by ID.\n\n\n**Parameters:**\n\n- **`eval_id`** (path, required, string): The ID of the evaluation to retrieve runs for.\n\n- **`run_id`** (path, required, string): The ID of the run to retrieve.\n\n- **`output_item_id`** (path, required, string): The ID of the output item to retrieve.\n\n\n**Successful Response (200 OK):**\nThe evaluation run output item\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "getEvalRunOutputItem",
      "path": "/evals/{eval_id}/runs/{run_id}/output_items/{output_item_id}",
      "method": "GET",
      "summary": "Get an output item of an eval run",
      "tags": [
        "Evals"
      ]
    }
  },
  {
    "content": "# Operation: List files\n\n**Endpoint:** `GET /files`\n\n**Tags:** Files\n\n\n**Description:**\nReturns a list of files.\n\n\n**Parameters:**\n\n- **`purpose`** (query, optional, string): Only return files with the given purpose.\n\n- **`limit`** (query, optional, integer): A limit on the number of objects to be returned. Limit can range between 1 and 10,000, and the default is 10,000.\n\n- **`order`** (query, optional, string): Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n\n- **`after`** (query, optional, string): A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "listFiles",
      "path": "/files",
      "method": "GET",
      "summary": "List files",
      "tags": [
        "Files"
      ]
    }
  },
  {
    "content": "# Operation: Upload file\n\n**Endpoint:** `POST /files`\n\n**Tags:** Files\n\n\n**Description:**\nUpload a file that can be used across various endpoints. Individual files can be up to 512 MB, and the size of all files uploaded by one organization can be up to 1 TB.\n\nThe Assistants API supports files up to 2 million tokens and of specific file types. See the [Assistants Tools guide](https://platform.openai.com/docs/assistants/tools) for details.\n\nThe Fine-tuning API only supports `.jsonl` files. The input also has certain required formats for fine-tuning [chat](https://platform.openai.com/docs/api-reference/fine-tuning/chat-input) or [completions](https://platform.openai.com/docs/api-reference/fine-tuning/completions-input) models.\n\nThe Batch API only supports `.jsonl` files up to 200 MB in size. The input also has a specific required [format](https://platform.openai.com/docs/api-reference/batch/request-input).\n\nPlease [contact us](https://help.openai.com/) if you need to increase these storage limits.\n\n\n**Request Body:**\n\nThe request body is a `multipart/form-data` object with the following key properties:\n- `file` (string): The File object (not file name) to be uploaded.\n- `purpose` (N/A): No description.\n- `expires_after` (N/A): No description.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "createFile",
      "path": "/files",
      "method": "POST",
      "summary": "Upload file",
      "tags": [
        "Files"
      ]
    }
  },
  {
    "content": "# Operation: Delete file\n\n**Endpoint:** `DELETE /files/{file_id}`\n\n**Tags:** Files\n\n\n**Description:**\nDelete a file.\n\n\n**Parameters:**\n\n- **`file_id`** (path, required, string): The ID of the file to use for this request.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "deleteFile",
      "path": "/files/{file_id}",
      "method": "DELETE",
      "summary": "Delete file",
      "tags": [
        "Files"
      ]
    }
  },
  {
    "content": "# Operation: Retrieve file\n\n**Endpoint:** `GET /files/{file_id}`\n\n**Tags:** Files\n\n\n**Description:**\nReturns information about a specific file.\n\n\n**Parameters:**\n\n- **`file_id`** (path, required, string): The ID of the file to use for this request.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "retrieveFile",
      "path": "/files/{file_id}",
      "method": "GET",
      "summary": "Retrieve file",
      "tags": [
        "Files"
      ]
    }
  },
  {
    "content": "# Operation: Retrieve file content\n\n**Endpoint:** `GET /files/{file_id}/content`\n\n**Tags:** Files\n\n\n**Description:**\nReturns the contents of the specified file.\n\n\n**Parameters:**\n\n- **`file_id`** (path, required, string): The ID of the file to use for this request.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "downloadFile",
      "path": "/files/{file_id}/content",
      "method": "GET",
      "summary": "Retrieve file content",
      "tags": [
        "Files"
      ]
    }
  },
  {
    "content": "# Operation: Run grader\n\n**Endpoint:** `POST /fine_tuning/alpha/graders/run`\n\n**Tags:** Fine-tuning\n\n\n**Description:**\nRun a grader.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `grader` (object): The grader used for the fine-tuning job.\n- `item` (object): The dataset item provided to the grader. This will be used to populate the `item` namespace. See [the guide](https://platform.openai.com/docs/guides/graders) for more details.\n- `model_sample` (string): The model sample to be evaluated. This value will be used to populate the `sample` namespace. See [the guide](https://platform.openai.com/docs/guides/graders) for more details. The `output_json` variable will be populated if the model sample is a valid JSON string.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "runGrader",
      "path": "/fine_tuning/alpha/graders/run",
      "method": "POST",
      "summary": "Run grader",
      "tags": [
        "Fine-tuning"
      ]
    }
  },
  {
    "content": "# Operation: Validate grader\n\n**Endpoint:** `POST /fine_tuning/alpha/graders/validate`\n\n**Tags:** Fine-tuning\n\n\n**Description:**\nValidate a grader.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `grader` (object): The grader used for the fine-tuning job.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "validateGrader",
      "path": "/fine_tuning/alpha/graders/validate",
      "method": "POST",
      "summary": "Validate grader",
      "tags": [
        "Fine-tuning"
      ]
    }
  },
  {
    "content": "# Operation: List checkpoint permissions\n\n**Endpoint:** `GET /fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions`\n\n**Tags:** Fine-tuning\n\n\n**Description:**\n**NOTE:** This endpoint requires an [admin API key](../admin-api-keys).\n\nOrganization owners can use this endpoint to view all permissions for a fine-tuned model checkpoint.\n\n\n**Parameters:**\n\n- **`fine_tuned_model_checkpoint`** (path, required, string): The ID of the fine-tuned model checkpoint to get permissions for.\n\n- **`project_id`** (query, optional, string): The ID of the project to get permissions for.\n\n- **`after`** (query, optional, string): Identifier for the last permission ID from the previous pagination request.\n\n- **`limit`** (query, optional, integer): Number of permissions to retrieve.\n\n- **`order`** (query, optional, string): The order in which to retrieve permissions.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "listFineTuningCheckpointPermissions",
      "path": "/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions",
      "method": "GET",
      "summary": "List checkpoint permissions",
      "tags": [
        "Fine-tuning"
      ]
    }
  },
  {
    "content": "# Operation: Create checkpoint permissions\n\n**Endpoint:** `POST /fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions`\n\n**Tags:** Fine-tuning\n\n\n**Description:**\n**NOTE:** Calling this endpoint requires an [admin API key](../admin-api-keys).\n\nThis enables organization owners to share fine-tuned models with other projects in their organization.\n\n\n**Parameters:**\n\n- **`fine_tuned_model_checkpoint`** (path, required, string): The ID of the fine-tuned model checkpoint to create a permission for.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `project_ids` (array): The project identifiers to grant access to.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "createFineTuningCheckpointPermission",
      "path": "/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions",
      "method": "POST",
      "summary": "Create checkpoint permissions",
      "tags": [
        "Fine-tuning"
      ]
    }
  },
  {
    "content": "# Operation: Delete checkpoint permission\n\n**Endpoint:** `DELETE /fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/{permission_id}`\n\n**Tags:** Fine-tuning\n\n\n**Description:**\n**NOTE:** This endpoint requires an [admin API key](../admin-api-keys).\n\nOrganization owners can use this endpoint to delete a permission for a fine-tuned model checkpoint.\n\n\n**Parameters:**\n\n- **`fine_tuned_model_checkpoint`** (path, required, string): The ID of the fine-tuned model checkpoint to delete a permission for.\n\n- **`permission_id`** (path, required, string): The ID of the fine-tuned model checkpoint permission to delete.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "deleteFineTuningCheckpointPermission",
      "path": "/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/{permission_id}",
      "method": "DELETE",
      "summary": "Delete checkpoint permission",
      "tags": [
        "Fine-tuning"
      ]
    }
  },
  {
    "content": "# Operation: List fine-tuning jobs\n\n**Endpoint:** `GET /fine_tuning/jobs`\n\n**Tags:** Fine-tuning\n\n\n**Description:**\nList your organization's fine-tuning jobs\n\n\n**Parameters:**\n\n- **`after`** (query, optional, string): Identifier for the last job from the previous pagination request.\n\n- **`limit`** (query, optional, integer): Number of fine-tuning jobs to retrieve.\n\n- **`metadata`** (query, optional, object): Optional metadata filter. To filter, use the syntax `metadata[k]=v`. Alternatively, set `metadata=null` to indicate no metadata.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "listPaginatedFineTuningJobs",
      "path": "/fine_tuning/jobs",
      "method": "GET",
      "summary": "List fine-tuning jobs",
      "tags": [
        "Fine-tuning"
      ]
    }
  },
  {
    "content": "# Operation: Retrieve fine-tuning job\n\n**Endpoint:** `GET /fine_tuning/jobs/{fine_tuning_job_id}`\n\n**Tags:** Fine-tuning\n\n\n**Description:**\nGet info about a fine-tuning job.\n\n[Learn more about fine-tuning](https://platform.openai.com/docs/guides/model-optimization)\n\n\n**Parameters:**\n\n- **`fine_tuning_job_id`** (path, required, string): The ID of the fine-tuning job.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "retrieveFineTuningJob",
      "path": "/fine_tuning/jobs/{fine_tuning_job_id}",
      "method": "GET",
      "summary": "Retrieve fine-tuning job",
      "tags": [
        "Fine-tuning"
      ]
    }
  },
  {
    "content": "# Operation: Cancel fine-tuning\n\n**Endpoint:** `POST /fine_tuning/jobs/{fine_tuning_job_id}/cancel`\n\n**Tags:** Fine-tuning\n\n\n**Description:**\nImmediately cancel a fine-tune job.\n\n\n**Parameters:**\n\n- **`fine_tuning_job_id`** (path, required, string): The ID of the fine-tuning job to cancel.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "cancelFineTuningJob",
      "path": "/fine_tuning/jobs/{fine_tuning_job_id}/cancel",
      "method": "POST",
      "summary": "Cancel fine-tuning",
      "tags": [
        "Fine-tuning"
      ]
    }
  },
  {
    "content": "# Operation: List fine-tuning checkpoints\n\n**Endpoint:** `GET /fine_tuning/jobs/{fine_tuning_job_id}/checkpoints`\n\n**Tags:** Fine-tuning\n\n\n**Description:**\nList checkpoints for a fine-tuning job.\n\n\n**Parameters:**\n\n- **`fine_tuning_job_id`** (path, required, string): The ID of the fine-tuning job to get checkpoints for.\n\n- **`after`** (query, optional, string): Identifier for the last checkpoint ID from the previous pagination request.\n\n- **`limit`** (query, optional, integer): Number of checkpoints to retrieve.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "listFineTuningJobCheckpoints",
      "path": "/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints",
      "method": "GET",
      "summary": "List fine-tuning checkpoints",
      "tags": [
        "Fine-tuning"
      ]
    }
  },
  {
    "content": "# Operation: List fine-tuning events\n\n**Endpoint:** `GET /fine_tuning/jobs/{fine_tuning_job_id}/events`\n\n**Tags:** Fine-tuning\n\n\n**Description:**\nGet status updates for a fine-tuning job.\n\n\n**Parameters:**\n\n- **`fine_tuning_job_id`** (path, required, string): The ID of the fine-tuning job to get events for.\n\n- **`after`** (query, optional, string): Identifier for the last event from the previous pagination request.\n\n- **`limit`** (query, optional, integer): Number of events to retrieve.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "listFineTuningEvents",
      "path": "/fine_tuning/jobs/{fine_tuning_job_id}/events",
      "method": "GET",
      "summary": "List fine-tuning events",
      "tags": [
        "Fine-tuning"
      ]
    }
  },
  {
    "content": "# Operation: Pause fine-tuning\n\n**Endpoint:** `POST /fine_tuning/jobs/{fine_tuning_job_id}/pause`\n\n**Tags:** Fine-tuning\n\n\n**Description:**\nPause a fine-tune job.\n\n\n**Parameters:**\n\n- **`fine_tuning_job_id`** (path, required, string): The ID of the fine-tuning job to pause.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "pauseFineTuningJob",
      "path": "/fine_tuning/jobs/{fine_tuning_job_id}/pause",
      "method": "POST",
      "summary": "Pause fine-tuning",
      "tags": [
        "Fine-tuning"
      ]
    }
  },
  {
    "content": "# Operation: Resume fine-tuning\n\n**Endpoint:** `POST /fine_tuning/jobs/{fine_tuning_job_id}/resume`\n\n**Tags:** Fine-tuning\n\n\n**Description:**\nResume a fine-tune job.\n\n\n**Parameters:**\n\n- **`fine_tuning_job_id`** (path, required, string): The ID of the fine-tuning job to resume.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "resumeFineTuningJob",
      "path": "/fine_tuning/jobs/{fine_tuning_job_id}/resume",
      "method": "POST",
      "summary": "Resume fine-tuning",
      "tags": [
        "Fine-tuning"
      ]
    }
  },
  {
    "content": "# Operation: Create image edit\n\n**Endpoint:** `POST /images/edits`\n\n**Tags:** Images\n\n\n**Description:**\nCreates an edited or extended image given one or more source images and a prompt. This endpoint only supports `gpt-image-1` and `dall-e-2`.\n\n\n**Request Body:**\n\nThe request body is a `multipart/form-data` object with the following key properties:\n- `image` (N/A): The image(s) to edit. Must be a supported image file or an array of images. For `gpt-image-1`, each image should be a `png`, `webp`, or `jpg` file less than 50MB. You can provide up to 16 images. For `dall-e-2`, you can only provide one image, and it should be a square `png` file less than 4MB.\n- `prompt` (string): A text description of the desired image(s). The maximum length is 1000 characters for `dall-e-2`, and 32000 characters for `gpt-image-1`.\n- `mask` (string): An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. If there are multiple images provided, the mask will be applied on the first image. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.\n- `background` (string): Allows to set transparency for the background of the generated image(s). This parameter is only supported for `gpt-image-1`. Must be one of `transparent`, `opaque` or `auto` (default value). When `auto` is used, the model will automatically determine the best background for the image. If `transparent`, the output format needs to support transparency, so it should be set to either `png` (default value) or `webp`.\n- `model` (N/A): The model to use for image generation. Only `dall-e-2` and `gpt-image-1` are supported. Defaults to `dall-e-2` unless a parameter specific to `gpt-image-1` is used.\n- `n` (integer): The number of images to generate. Must be between 1 and 10.\n- `size` (string): The size of the generated images. Must be one of `1024x1024`, `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default value) for `gpt-image-1`, and one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`.\n- `response_format` (string): The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated. This parameter is only supported for `dall-e-2`, as `gpt-image-1` will always return base64-encoded images.\n- `output_format` (string): The format in which the generated images are returned. This parameter is only supported for `gpt-image-1`. Must be one of `png`, `jpeg`, or `webp`. The default value is `png`.\n- `output_compression` (integer): The compression level (0-100%) for the generated images. This parameter is only supported for `gpt-image-1` with the `webp` or `jpeg` output formats, and defaults to 100.\n- `user` (string): A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).\n- `input_fidelity` (N/A): No description.\n- `stream` (boolean): Edit the image in streaming mode. Defaults to `false`. See the [Image generation guide](https://platform.openai.com/docs/guides/image-generation) for more information.\n- `partial_images` (N/A): No description.\n- `quality` (string): The quality of the image that will be generated. `high`, `medium` and `low` are only supported for `gpt-image-1`. `dall-e-2` only supports `standard` quality. Defaults to `auto`.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n**Curl:**\n```curl\ncurl -s -D >(grep -i x-request-id >&2) \\\n  -o >(jq -r '.data[0].b64_json' | base64 --decode > gift-basket.png) \\\n  -X POST \"https://api.openai.com/v1/images/edits\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -F \"model=gpt-image-1\" \\\n  -F \"image[]=@body-lotion.png\" \\\n  -F \"image[]=@bath-bomb.png\" \\\n  -F \"image[]=@incense-kit.png\" \\\n  -F \"image[]=@soap.png\" \\\n  -F 'prompt=Create a lovely gift basket with these four items in it'\n```\n\n\n**Python:**\n```python\nfrom openai import OpenAI\n\nclient = OpenAI(\n    api_key=\"My API Key\",\n)\nimages_response = client.images.edit(\n    image=b\"raw file contents\",\n    prompt=\"A cute baby sea otter wearing a beret\",\n)\nprint(images_response)\n```\n\n\n**Node.js:**\n```javascript\nimport OpenAI from 'openai';\n\nconst client = new OpenAI({\n  apiKey: 'My API Key',\n});\n\nconst imagesResponse = await client.images.edit({\n  image: fs.createReadStream('path/to/file'),\n  prompt: 'A cute baby sea otter wearing a beret',\n});\n\nconsole.log(imagesResponse);\n```\n\n\n**Go:**\n```go\npackage main\n\nimport (\n  \"bytes\"\n  \"context\"\n  \"fmt\"\n  \"io\"\n\n  \"github.com/openai/openai-go\"\n  \"github.com/openai/openai-go/option\"\n)\n\nfunc main() {\n  client := openai.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  imagesResponse, err := client.Images.Edit(context.TODO(), openai.ImageEditParams{\n    Image: openai.ImageEditParamsImageUnion{\n      OfFile: io.Reader(bytes.NewBuffer([]byte(\"some file contents\"))),\n    },\n    Prompt: \"A cute baby sea otter wearing a beret\",\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", imagesResponse)\n}\n```\n\n\n**Java:**\n```java\npackage com.openai.example;\n\nimport com.openai.client.OpenAIClient;\nimport com.openai.client.okhttp.OpenAIOkHttpClient;\nimport com.openai.models.images.ImageEditParams;\nimport com.openai.models.images.ImagesResponse;\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\n\npublic final class Main {\n    private Main() {}\n\n    public static void main(String[] args) {\n        OpenAIClient client = OpenAIOkHttpClient.fromEnv();\n\n        ImageEditParams params = ImageEditParams.builder()\n            .image(ByteArrayInputStream(\"some content\".getBytes()))\n            .prompt(\"A cute baby sea otter wearing a beret\")\n            .build();\n        ImagesResponse imagesResponse = client.images().edit(params);\n    }\n}\n```\n\n\n**Ruby:**\n```ruby\nrequire \"openai\"\n\nopenai = OpenAI::Client.new(api_key: \"My API Key\")\n\nimages_response = openai.images.edit(image: Pathname(__FILE__), prompt: \"A cute baby sea otter wearing a beret\")\n\nputs(images_response)\n```\n\n\n**Curl:**\n```curl\ncurl -s -N -X POST \"https://api.openai.com/v1/images/edits\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -F \"model=gpt-image-1\" \\\n  -F \"image[]=@body-lotion.png\" \\\n  -F \"image[]=@bath-bomb.png\" \\\n  -F \"image[]=@incense-kit.png\" \\\n  -F \"image[]=@soap.png\" \\\n  -F 'prompt=Create a lovely gift basket with these four items in it' \\\n  -F \"stream=true\"\n```\n\n\n**Python:**\n```python\nfrom openai import OpenAI\n\nclient = OpenAI(\n    api_key=\"My API Key\",\n)\nimages_response = client.images.edit(\n    image=b\"raw file contents\",\n    prompt=\"A cute baby sea otter wearing a beret\",\n)\nprint(images_response)\n```\n\n\n**Node.js:**\n```javascript\nimport OpenAI from 'openai';\n\nconst client = new OpenAI({\n  apiKey: 'My API Key',\n});\n\nconst imagesResponse = await client.images.edit({\n  image: fs.createReadStream('path/to/file'),\n  prompt: 'A cute baby sea otter wearing a beret',\n});\n\nconsole.log(imagesResponse);\n```\n\n\n**Go:**\n```go\npackage main\n\nimport (\n  \"bytes\"\n  \"context\"\n  \"fmt\"\n  \"io\"\n\n  \"github.com/openai/openai-go\"\n  \"github.com/openai/openai-go/option\"\n)\n\nfunc main() {\n  client := openai.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  imagesResponse, err := client.Images.Edit(context.TODO(), openai.ImageEditParams{\n    Image: openai.ImageEditParamsImageUnion{\n      OfFile: io.Reader(bytes.NewBuffer([]byte(\"some file contents\"))),\n    },\n    Prompt: \"A cute baby sea otter wearing a beret\",\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", imagesResponse)\n}\n```\n\n\n**Java:**\n```java\npackage com.openai.example;\n\nimport com.openai.client.OpenAIClient;\nimport com.openai.client.okhttp.OpenAIOkHttpClient;\nimport com.openai.models.images.ImageEditParams;\nimport com.openai.models.images.ImagesResponse;\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\n\npublic final class Main {\n    private Main() {}\n\n    public static void main(String[] args) {\n        OpenAIClient client = OpenAIOkHttpClient.fromEnv();\n\n        ImageEditParams params = ImageEditParams.builder()\n            .image(ByteArrayInputStream(\"some content\".getBytes()))\n            .prompt(\"A cute baby sea otter wearing a beret\")\n            .build();\n        ImagesResponse imagesResponse = client.images().edit(params);\n    }\n}\n```\n\n\n**Ruby:**\n```ruby\nrequire \"openai\"\n\nopenai = OpenAI::Client.new(api_key: \"My API Key\")\n\nimages_response = openai.images.edit(image: Pathname(__FILE__), prompt: \"A cute baby sea otter wearing a beret\")\n\nputs(images_response)\n```",
    "metadata": {
      "operationId": "createImageEdit",
      "path": "/images/edits",
      "method": "POST",
      "summary": "Create image edit",
      "tags": [
        "Images"
      ]
    }
  },
  {
    "content": "# Operation: Create image\n\n**Endpoint:** `POST /images/generations`\n\n**Tags:** Images\n\n\n**Description:**\nCreates an image given a prompt. [Learn more](https://platform.openai.com/docs/guides/images).\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `prompt` (string): A text description of the desired image(s). The maximum length is 32000 characters for `gpt-image-1`, 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`.\n- `model` (N/A): The model to use for image generation. One of `dall-e-2`, `dall-e-3`, or `gpt-image-1`. Defaults to `dall-e-2` unless a parameter specific to `gpt-image-1` is used.\n- `n` (integer): The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.\n- `quality` (string): The quality of the image that will be generated. - `auto` (default value) will automatically select the best quality for the given model. - `high`, `medium` and `low` are supported for `gpt-image-1`. - `hd` and `standard` are supported for `dall-e-3`. - `standard` is the only option for `dall-e-2`.\n- `response_format` (string): The format in which generated images with `dall-e-2` and `dall-e-3` are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated. This parameter isn't supported for `gpt-image-1` which will always return base64-encoded images.\n- `output_format` (string): The format in which the generated images are returned. This parameter is only supported for `gpt-image-1`. Must be one of `png`, `jpeg`, or `webp`.\n- `output_compression` (integer): The compression level (0-100%) for the generated images. This parameter is only supported for `gpt-image-1` with the `webp` or `jpeg` output formats, and defaults to 100.\n- `stream` (boolean): Generate the image in streaming mode. Defaults to `false`. See the [Image generation guide](https://platform.openai.com/docs/guides/image-generation) for more information. This parameter is only supported for `gpt-image-1`.\n- `partial_images` (N/A): No description.\n- `size` (string): The size of the generated images. Must be one of `1024x1024`, `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default value) for `gpt-image-1`, one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`, and one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3`.\n- `moderation` (string): Control the content-moderation level for images generated by `gpt-image-1`. Must be either `low` for less restrictive filtering or `auto` (default value).\n- `background` (string): Allows to set transparency for the background of the generated image(s). This parameter is only supported for `gpt-image-1`. Must be one of `transparent`, `opaque` or `auto` (default value). When `auto` is used, the model will automatically determine the best background for the image. If `transparent`, the output format needs to support transparency, so it should be set to either `png` (default value) or `webp`.\n- `style` (string): The style of the generated images. This parameter is only supported for `dall-e-3`. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images.\n- `user` (string): A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n**Curl:**\n```curl\ncurl https://api.openai.com/v1/images/generations \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"model\": \"gpt-image-1\",\n    \"prompt\": \"A cute baby sea otter\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }'\n```\n\n\n**Python:**\n```python\nfrom openai import OpenAI\n\nclient = OpenAI(\n    api_key=\"My API Key\",\n)\nimages_response = client.images.generate(\n    prompt=\"A cute baby sea otter\",\n)\nprint(images_response)\n```\n\n\n**Node.js:**\n```javascript\nimport OpenAI from 'openai';\n\nconst client = new OpenAI({\n  apiKey: 'My API Key',\n});\n\nconst imagesResponse = await client.images.generate({ prompt: 'A cute baby sea otter' });\n\nconsole.log(imagesResponse);\n```\n\n\n**Go:**\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/openai/openai-go\"\n  \"github.com/openai/openai-go/option\"\n)\n\nfunc main() {\n  client := openai.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  imagesResponse, err := client.Images.Generate(context.TODO(), openai.ImageGenerateParams{\n    Prompt: \"A cute baby sea otter\",\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", imagesResponse)\n}\n```\n\n\n**Java:**\n```java\npackage com.openai.example;\n\nimport com.openai.client.OpenAIClient;\nimport com.openai.client.okhttp.OpenAIOkHttpClient;\nimport com.openai.models.images.ImageGenerateParams;\nimport com.openai.models.images.ImagesResponse;\n\npublic final class Main {\n    private Main() {}\n\n    public static void main(String[] args) {\n        OpenAIClient client = OpenAIOkHttpClient.fromEnv();\n\n        ImageGenerateParams params = ImageGenerateParams.builder()\n            .prompt(\"A cute baby sea otter\")\n            .build();\n        ImagesResponse imagesResponse = client.images().generate(params);\n    }\n}\n```\n\n\n**Ruby:**\n```ruby\nrequire \"openai\"\n\nopenai = OpenAI::Client.new(api_key: \"My API Key\")\n\nimages_response = openai.images.generate(prompt: \"A cute baby sea otter\")\n\nputs(images_response)\n```\n\n\n**Curl:**\n```curl\ncurl https://api.openai.com/v1/images/generations \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"model\": \"gpt-image-1\",\n    \"prompt\": \"A cute baby sea otter\",\n    \"n\": 1,\n    \"size\": \"1024x1024\",\n    \"stream\": true\n  }' \\\n  --no-buffer\n```\n\n\n**Python:**\n```python\nfrom openai import OpenAI\n\nclient = OpenAI(\n    api_key=\"My API Key\",\n)\nimages_response = client.images.generate(\n    prompt=\"A cute baby sea otter\",\n)\nprint(images_response)\n```\n\n\n**Node.js:**\n```javascript\nimport OpenAI from 'openai';\n\nconst client = new OpenAI({\n  apiKey: 'My API Key',\n});\n\nconst imagesResponse = await client.images.generate({ prompt: 'A cute baby sea otter' });\n\nconsole.log(imagesResponse);\n```\n\n\n**Go:**\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/openai/openai-go\"\n  \"github.com/openai/openai-go/option\"\n)\n\nfunc main() {\n  client := openai.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  imagesResponse, err := client.Images.Generate(context.TODO(), openai.ImageGenerateParams{\n    Prompt: \"A cute baby sea otter\",\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", imagesResponse)\n}\n```\n\n\n**Java:**\n```java\npackage com.openai.example;\n\nimport com.openai.client.OpenAIClient;\nimport com.openai.client.okhttp.OpenAIOkHttpClient;\nimport com.openai.models.images.ImageGenerateParams;\nimport com.openai.models.images.ImagesResponse;\n\npublic final class Main {\n    private Main() {}\n\n    public static void main(String[] args) {\n        OpenAIClient client = OpenAIOkHttpClient.fromEnv();\n\n        ImageGenerateParams params = ImageGenerateParams.builder()\n            .prompt(\"A cute baby sea otter\")\n            .build();\n        ImagesResponse imagesResponse = client.images().generate(params);\n    }\n}\n```\n\n\n**Ruby:**\n```ruby\nrequire \"openai\"\n\nopenai = OpenAI::Client.new(api_key: \"My API Key\")\n\nimages_response = openai.images.generate(prompt: \"A cute baby sea otter\")\n\nputs(images_response)\n```",
    "metadata": {
      "operationId": "createImage",
      "path": "/images/generations",
      "method": "POST",
      "summary": "Create image",
      "tags": [
        "Images"
      ]
    }
  },
  {
    "content": "# Operation: Create image variation\n\n**Endpoint:** `POST /images/variations`\n\n**Tags:** Images\n\n\n**Description:**\nCreates a variation of a given image. This endpoint only supports `dall-e-2`.\n\n\n**Request Body:**\n\nThe request body is a `multipart/form-data` object with the following key properties:\n- `image` (string): The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.\n- `model` (N/A): The model to use for image generation. Only `dall-e-2` is supported at this time.\n- `n` (integer): The number of images to generate. Must be between 1 and 10.\n- `response_format` (string): The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.\n- `size` (string): The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.\n- `user` (string): A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "createImageVariation",
      "path": "/images/variations",
      "method": "POST",
      "summary": "Create image variation",
      "tags": [
        "Images"
      ]
    }
  },
  {
    "content": "# Operation: List models\n\n**Endpoint:** `GET /models`\n\n**Tags:** Models\n\n\n**Description:**\nLists the currently available models, and provides basic information about each one such as the owner and availability.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "listModels",
      "path": "/models",
      "method": "GET",
      "summary": "List models",
      "tags": [
        "Models"
      ]
    }
  },
  {
    "content": "# Operation: Retrieve model\n\n**Endpoint:** `GET /models/{model}`\n\n**Tags:** Models\n\n\n**Description:**\nRetrieves a model instance, providing basic information about the model such as the owner and permissioning.\n\n\n**Parameters:**\n\n- **`model`** (path, required, string): The ID of the model to use for this request\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "retrieveModel",
      "path": "/models/{model}",
      "method": "GET",
      "summary": "Retrieve model",
      "tags": [
        "Models"
      ]
    }
  },
  {
    "content": "# Operation: Delete a fine-tuned model\n\n**Endpoint:** `DELETE /models/{model}`\n\n**Tags:** Models\n\n\n**Description:**\nDelete a fine-tuned model. You must have the Owner role in your organization to delete a model.\n\n\n**Parameters:**\n\n- **`model`** (path, required, string): The model to delete\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "deleteModel",
      "path": "/models/{model}",
      "method": "DELETE",
      "summary": "Delete a fine-tuned model",
      "tags": [
        "Models"
      ]
    }
  },
  {
    "content": "# Operation: Create moderation\n\n**Endpoint:** `POST /moderations`\n\n**Tags:** Moderations\n\n\n**Description:**\nClassifies if text and/or image inputs are potentially harmful. Learn\nmore in the [moderation guide](https://platform.openai.com/docs/guides/moderation).\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `input` (N/A): Input (or inputs) to classify. Can be a single string, an array of strings, or an array of multi-modal input objects similar to other models.\n- `model` (N/A): The content moderation model you would like to use. Learn more in [the moderation guide](https://platform.openai.com/docs/guides/moderation), and learn about available models [here](https://platform.openai.com/docs/models#moderation).\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n**Curl:**\n```curl\ncurl https://api.openai.com/v1/moderations \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"input\": \"I want to kill them.\"\n  }'\n```\n\n\n**Python:**\n```python\nfrom openai import OpenAI\n\nclient = OpenAI(\n    api_key=\"My API Key\",\n)\nmoderation = client.moderations.create(\n    input=\"I want to kill them.\",\n)\nprint(moderation.id)\n```\n\n\n**Node.js:**\n```javascript\nimport OpenAI from 'openai';\n\nconst client = new OpenAI({\n  apiKey: 'My API Key',\n});\n\nconst moderation = await client.moderations.create({ input: 'I want to kill them.' });\n\nconsole.log(moderation.id);\n```\n\n\n**Csharp:**\n```csharp\nusing System;\nusing System.ClientModel;\n\nusing OpenAI.Moderations;\n\nModerationClient client = new(\n    model: \"omni-moderation-latest\",\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\n);\n\nClientResult<ModerationResult> moderation = client.ClassifyText(\"I want to kill them.\");\n```\n\n\n**Go:**\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/openai/openai-go\"\n  \"github.com/openai/openai-go/option\"\n)\n\nfunc main() {\n  client := openai.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  moderation, err := client.Moderations.New(context.TODO(), openai.ModerationNewParams{\n    Input: openai.ModerationNewParamsInputUnion{\n      OfString: openai.String(\"I want to kill them.\"),\n    },\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", moderation.ID)\n}\n```\n\n\n**Java:**\n```java\npackage com.openai.example;\n\nimport com.openai.client.OpenAIClient;\nimport com.openai.client.okhttp.OpenAIOkHttpClient;\nimport com.openai.models.moderations.ModerationCreateParams;\nimport com.openai.models.moderations.ModerationCreateResponse;\n\npublic final class Main {\n    private Main() {}\n\n    public static void main(String[] args) {\n        OpenAIClient client = OpenAIOkHttpClient.fromEnv();\n\n        ModerationCreateParams params = ModerationCreateParams.builder()\n            .input(\"I want to kill them.\")\n            .build();\n        ModerationCreateResponse moderation = client.moderations().create(params);\n    }\n}\n```\n\n\n**Ruby:**\n```ruby\nrequire \"openai\"\n\nopenai = OpenAI::Client.new(api_key: \"My API Key\")\n\nmoderation = openai.moderations.create(input: \"I want to kill them.\")\n\nputs(moderation)\n```\n\n\n**Curl:**\n```curl\ncurl https://api.openai.com/v1/moderations \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"model\": \"omni-moderation-latest\",\n    \"input\": [\n      { \"type\": \"text\", \"text\": \"...text to classify goes here...\" },\n      {\n        \"type\": \"image_url\",\n        \"image_url\": {\n          \"url\": \"https://example.com/image.png\"\n        }\n      }\n    ]\n  }'\n```\n\n\n**Python:**\n```python\nfrom openai import OpenAI\n\nclient = OpenAI(\n    api_key=\"My API Key\",\n)\nmoderation = client.moderations.create(\n    input=\"I want to kill them.\",\n)\nprint(moderation.id)\n```\n\n\n**Node.js:**\n```javascript\nimport OpenAI from 'openai';\n\nconst client = new OpenAI({\n  apiKey: 'My API Key',\n});\n\nconst moderation = await client.moderations.create({ input: 'I want to kill them.' });\n\nconsole.log(moderation.id);\n```\n\n\n**Go:**\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/openai/openai-go\"\n  \"github.com/openai/openai-go/option\"\n)\n\nfunc main() {\n  client := openai.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  moderation, err := client.Moderations.New(context.TODO(), openai.ModerationNewParams{\n    Input: openai.ModerationNewParamsInputUnion{\n      OfString: openai.String(\"I want to kill them.\"),\n    },\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", moderation.ID)\n}\n```\n\n\n**Java:**\n```java\npackage com.openai.example;\n\nimport com.openai.client.OpenAIClient;\nimport com.openai.client.okhttp.OpenAIOkHttpClient;\nimport com.openai.models.moderations.ModerationCreateParams;\nimport com.openai.models.moderations.ModerationCreateResponse;\n\npublic final class Main {\n    private Main() {}\n\n    public static void main(String[] args) {\n        OpenAIClient client = OpenAIOkHttpClient.fromEnv();\n\n        ModerationCreateParams params = ModerationCreateParams.builder()\n            .input(\"I want to kill them.\")\n            .build();\n        ModerationCreateResponse moderation = client.moderations().create(params);\n    }\n}\n```\n\n\n**Ruby:**\n```ruby\nrequire \"openai\"\n\nopenai = OpenAI::Client.new(api_key: \"My API Key\")\n\nmoderation = openai.moderations.create(input: \"I want to kill them.\")\n\nputs(moderation)\n```",
    "metadata": {
      "operationId": "createModeration",
      "path": "/moderations",
      "method": "POST",
      "summary": "Create moderation",
      "tags": [
        "Moderations"
      ]
    }
  },
  {
    "content": "# Operation: List all organization and project API keys.\n\n**Endpoint:** `GET /organization/admin_api_keys`\n\n\n**Description:**\nList organization API keys\n\n\n**Parameters:**\n\n- **`after`** (query, optional, string): No description.\n\n- **`order`** (query, optional, string): No description.\n\n- **`limit`** (query, optional, integer): No description.\n\n\n**Successful Response (200 OK):**\nA list of organization API keys.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "admin-api-keys-list",
      "path": "/organization/admin_api_keys",
      "method": "GET",
      "summary": "List all organization and project API keys.",
      "tags": []
    }
  },
  {
    "content": "# Operation: Create admin API key\n\n**Endpoint:** `POST /organization/admin_api_keys`\n\n\n**Description:**\nCreate an organization admin API key\n\n\n**Request Body:**\n\nA `application/json` object is required.\n\n\n**Successful Response (200 OK):**\nThe newly created admin API key.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "admin-api-keys-create",
      "path": "/organization/admin_api_keys",
      "method": "POST",
      "summary": "Create admin API key",
      "tags": []
    }
  },
  {
    "content": "# Operation: Retrieve admin API key\n\n**Endpoint:** `GET /organization/admin_api_keys/{key_id}`\n\n\n**Description:**\nRetrieve a single organization API key\n\n\n**Parameters:**\n\n- **`key_id`** (path, required, string): No description.\n\n\n**Successful Response (200 OK):**\nDetails of the requested API key.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "admin-api-keys-get",
      "path": "/organization/admin_api_keys/{key_id}",
      "method": "GET",
      "summary": "Retrieve admin API key",
      "tags": []
    }
  },
  {
    "content": "# Operation: Delete admin API key\n\n**Endpoint:** `DELETE /organization/admin_api_keys/{key_id}`\n\n\n**Description:**\nDelete an organization admin API key\n\n\n**Parameters:**\n\n- **`key_id`** (path, required, string): No description.\n\n\n**Successful Response (200 OK):**\nConfirmation that the API key was deleted.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "admin-api-keys-delete",
      "path": "/organization/admin_api_keys/{key_id}",
      "method": "DELETE",
      "summary": "Delete admin API key",
      "tags": []
    }
  },
  {
    "content": "# Operation: List audit logs\n\n**Endpoint:** `GET /organization/audit_logs`\n\n**Tags:** Audit Logs\n\n\n**Description:**\nList user actions and configuration changes within this organization.\n\n\n**Parameters:**\n\n- **`effective_at`** (query, optional, object): Return only events whose `effective_at` (Unix seconds) is in this range.\n\n- **`project_ids[]`** (query, optional, array): Return only events for these projects.\n\n- **`event_types[]`** (query, optional, array): Return only events with a `type` in one of these values. For example, `project.created`. For all options, see the documentation for the [audit log object](https://platform.openai.com/docs/api-reference/audit-logs/object).\n\n- **`actor_ids[]`** (query, optional, array): Return only events performed by these actors. Can be a user ID, a service account ID, or an api key tracking ID.\n\n- **`actor_emails[]`** (query, optional, array): Return only events performed by users with these emails.\n\n- **`resource_ids[]`** (query, optional, array): Return only events performed on these targets. For example, a project ID updated.\n\n- **`limit`** (query, optional, integer): A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n\n- **`after`** (query, optional, string): A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n\n- **`before`** (query, optional, string): A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n\n\n**Successful Response (200 OK):**\nAudit logs listed successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "list-audit-logs",
      "path": "/organization/audit_logs",
      "method": "GET",
      "summary": "List audit logs",
      "tags": [
        "Audit Logs"
      ]
    }
  },
  {
    "content": "# Operation: List organization certificates\n\n**Endpoint:** `GET /organization/certificates`\n\n**Tags:** Certificates\n\n\n**Description:**\nList uploaded certificates for this organization.\n\n\n**Parameters:**\n\n- **`limit`** (query, optional, integer): A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n\n- **`after`** (query, optional, string): A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n\n- **`order`** (query, optional, string): Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n\n\n**Successful Response (200 OK):**\nCertificates listed successfully.\n\n\n**Code Examples:**\n\n\n```\nrequest\n```\n\n\n```\nresponse\n```",
    "metadata": {
      "operationId": "listOrganizationCertificates",
      "path": "/organization/certificates",
      "method": "GET",
      "summary": "List organization certificates",
      "tags": [
        "Certificates"
      ]
    }
  },
  {
    "content": "# Operation: Upload certificate\n\n**Endpoint:** `POST /organization/certificates`\n\n**Tags:** Certificates\n\n\n**Description:**\nUpload a certificate to the organization. This does **not** automatically activate the certificate.\n\nOrganizations can upload up to 50 certificates.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `name` (string): An optional name for the certificate\n- `content` (string): The certificate content in PEM format\n\n\n**Successful Response (200 OK):**\nCertificate uploaded successfully.\n\n\n**Code Examples:**\n\n\n```\nrequest\n```\n\n\n```\nresponse\n```",
    "metadata": {
      "operationId": "uploadCertificate",
      "path": "/organization/certificates",
      "method": "POST",
      "summary": "Upload certificate",
      "tags": [
        "Certificates"
      ]
    }
  },
  {
    "content": "# Operation: Activate certificates for organization\n\n**Endpoint:** `POST /organization/certificates/activate`\n\n**Tags:** Certificates\n\n\n**Description:**\nActivate certificates at the organization level.\n\nYou can atomically and idempotently activate up to 10 certificates at a time.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `certificate_ids` (array): No description.\n\n\n**Successful Response (200 OK):**\nCertificates activated successfully.\n\n\n**Code Examples:**\n\n\n```\nrequest\n```\n\n\n```\nresponse\n```",
    "metadata": {
      "operationId": "activateOrganizationCertificates",
      "path": "/organization/certificates/activate",
      "method": "POST",
      "summary": "Activate certificates for organization",
      "tags": [
        "Certificates"
      ]
    }
  },
  {
    "content": "# Operation: Deactivate certificates for organization\n\n**Endpoint:** `POST /organization/certificates/deactivate`\n\n**Tags:** Certificates\n\n\n**Description:**\nDeactivate certificates at the organization level.\n\nYou can atomically and idempotently deactivate up to 10 certificates at a time.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `certificate_ids` (array): No description.\n\n\n**Successful Response (200 OK):**\nCertificates deactivated successfully.\n\n\n**Code Examples:**\n\n\n```\nrequest\n```\n\n\n```\nresponse\n```",
    "metadata": {
      "operationId": "deactivateOrganizationCertificates",
      "path": "/organization/certificates/deactivate",
      "method": "POST",
      "summary": "Deactivate certificates for organization",
      "tags": [
        "Certificates"
      ]
    }
  },
  {
    "content": "# Operation: Get certificate\n\n**Endpoint:** `GET /organization/certificates/{certificate_id}`\n\n**Tags:** Certificates\n\n\n**Description:**\nGet a certificate that has been uploaded to the organization.\n\nYou can get a certificate regardless of whether it is active or not.\n\n\n**Parameters:**\n\n- **`certificate_id`** (path, required, string): Unique ID of the certificate to retrieve.\n\n- **`include`** (query, optional, array): A list of additional fields to include in the response. Currently the only supported value is `content` to fetch the PEM content of the certificate.\n\n\n**Successful Response (200 OK):**\nCertificate retrieved successfully.\n\n\n**Code Examples:**\n\n\n```\nrequest\n```\n\n\n```\nresponse\n```",
    "metadata": {
      "operationId": "getCertificate",
      "path": "/organization/certificates/{certificate_id}",
      "method": "GET",
      "summary": "Get certificate",
      "tags": [
        "Certificates"
      ]
    }
  },
  {
    "content": "# Operation: Modify certificate\n\n**Endpoint:** `POST /organization/certificates/{certificate_id}`\n\n**Tags:** Certificates\n\n\n**Description:**\nModify a certificate. Note that only the name can be modified.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `name` (string): The updated name for the certificate\n\n\n**Successful Response (200 OK):**\nCertificate modified successfully.\n\n\n**Code Examples:**\n\n\n```\nrequest\n```\n\n\n```\nresponse\n```",
    "metadata": {
      "operationId": "modifyCertificate",
      "path": "/organization/certificates/{certificate_id}",
      "method": "POST",
      "summary": "Modify certificate",
      "tags": [
        "Certificates"
      ]
    }
  },
  {
    "content": "# Operation: Delete certificate\n\n**Endpoint:** `DELETE /organization/certificates/{certificate_id}`\n\n**Tags:** Certificates\n\n\n**Description:**\nDelete a certificate from the organization.\n\nThe certificate must be inactive for the organization and all projects.\n\n\n**Successful Response (200 OK):**\nCertificate deleted successfully.\n\n\n**Code Examples:**\n\n\n```\nrequest\n```\n\n\n```\nresponse\n```",
    "metadata": {
      "operationId": "deleteCertificate",
      "path": "/organization/certificates/{certificate_id}",
      "method": "DELETE",
      "summary": "Delete certificate",
      "tags": [
        "Certificates"
      ]
    }
  },
  {
    "content": "# Operation: Costs\n\n**Endpoint:** `GET /organization/costs`\n\n**Tags:** Usage\n\n\n**Description:**\nGet costs details for the organization.\n\n\n**Parameters:**\n\n- **`start_time`** (query, required, integer): Start time (Unix seconds) of the query time range, inclusive.\n\n- **`end_time`** (query, optional, integer): End time (Unix seconds) of the query time range, exclusive.\n\n- **`bucket_width`** (query, optional, string): Width of each time bucket in response. Currently only `1d` is supported, default to `1d`.\n\n- **`project_ids`** (query, optional, array): Return only costs for these projects.\n\n- **`group_by`** (query, optional, array): Group the costs by the specified fields. Support fields include `project_id`, `line_item` and any combination of them.\n\n- **`limit`** (query, optional, integer): A limit on the number of buckets to be returned. Limit can range between 1 and 180, and the default is 7.\n\n- **`page`** (query, optional, string): A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.\n\n\n**Successful Response (200 OK):**\nCosts data retrieved successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "usage-costs",
      "path": "/organization/costs",
      "method": "GET",
      "summary": "Costs",
      "tags": [
        "Usage"
      ]
    }
  },
  {
    "content": "# Operation: List invites\n\n**Endpoint:** `GET /organization/invites`\n\n**Tags:** Invites\n\n\n**Description:**\nReturns a list of invites in the organization.\n\n\n**Parameters:**\n\n- **`limit`** (query, optional, integer): A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n\n- **`after`** (query, optional, string): A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n\n\n**Successful Response (200 OK):**\nInvites listed successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "list-invites",
      "path": "/organization/invites",
      "method": "GET",
      "summary": "List invites",
      "tags": [
        "Invites"
      ]
    }
  },
  {
    "content": "# Operation: Create invite\n\n**Endpoint:** `POST /organization/invites`\n\n**Tags:** Invites\n\n\n**Description:**\nCreate an invite for a user to the organization. The invite must be accepted by the user before they have access to the organization.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `email` (string): Send an email to this address\n- `role` (string): `owner` or `reader`\n- `projects` (array): An array of projects to which membership is granted at the same time the org invite is accepted. If omitted, the user will be invited to the default project for compatibility with legacy behavior.\n\n\n**Successful Response (200 OK):**\nUser invited successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "inviteUser",
      "path": "/organization/invites",
      "method": "POST",
      "summary": "Create invite",
      "tags": [
        "Invites"
      ]
    }
  },
  {
    "content": "# Operation: Retrieve invite\n\n**Endpoint:** `GET /organization/invites/{invite_id}`\n\n**Tags:** Invites\n\n\n**Description:**\nRetrieves an invite.\n\n\n**Parameters:**\n\n- **`invite_id`** (path, required, string): The ID of the invite to retrieve.\n\n\n**Successful Response (200 OK):**\nInvite retrieved successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "retrieve-invite",
      "path": "/organization/invites/{invite_id}",
      "method": "GET",
      "summary": "Retrieve invite",
      "tags": [
        "Invites"
      ]
    }
  },
  {
    "content": "# Operation: Delete invite\n\n**Endpoint:** `DELETE /organization/invites/{invite_id}`\n\n**Tags:** Invites\n\n\n**Description:**\nDelete an invite. If the invite has already been accepted, it cannot be deleted.\n\n\n**Parameters:**\n\n- **`invite_id`** (path, required, string): The ID of the invite to delete.\n\n\n**Successful Response (200 OK):**\nInvite deleted successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "delete-invite",
      "path": "/organization/invites/{invite_id}",
      "method": "DELETE",
      "summary": "Delete invite",
      "tags": [
        "Invites"
      ]
    }
  },
  {
    "content": "# Operation: List projects\n\n**Endpoint:** `GET /organization/projects`\n\n**Tags:** Projects\n\n\n**Description:**\nReturns a list of projects.\n\n\n**Parameters:**\n\n- **`limit`** (query, optional, integer): A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n\n- **`after`** (query, optional, string): A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n\n- **`include_archived`** (query, optional, boolean): If `true` returns all projects including those that have been `archived`. Archived projects are not included by default.\n\n\n**Successful Response (200 OK):**\nProjects listed successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "list-projects",
      "path": "/organization/projects",
      "method": "GET",
      "summary": "List projects",
      "tags": [
        "Projects"
      ]
    }
  },
  {
    "content": "# Operation: Create project\n\n**Endpoint:** `POST /organization/projects`\n\n**Tags:** Projects\n\n\n**Description:**\nCreate a new project in the organization. Projects can be created and archived, but cannot be deleted.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `name` (string): The friendly name of the project, this name appears in reports.\n\n\n**Successful Response (200 OK):**\nProject created successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "create-project",
      "path": "/organization/projects",
      "method": "POST",
      "summary": "Create project",
      "tags": [
        "Projects"
      ]
    }
  },
  {
    "content": "# Operation: Retrieve project\n\n**Endpoint:** `GET /organization/projects/{project_id}`\n\n**Tags:** Projects\n\n\n**Description:**\nRetrieves a project.\n\n\n**Parameters:**\n\n- **`project_id`** (path, required, string): The ID of the project.\n\n\n**Successful Response (200 OK):**\nProject retrieved successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "retrieve-project",
      "path": "/organization/projects/{project_id}",
      "method": "GET",
      "summary": "Retrieve project",
      "tags": [
        "Projects"
      ]
    }
  },
  {
    "content": "# Operation: Modify project\n\n**Endpoint:** `POST /organization/projects/{project_id}`\n\n**Tags:** Projects\n\n\n**Description:**\nModifies a project in the organization.\n\n\n**Parameters:**\n\n- **`project_id`** (path, required, string): The ID of the project.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `name` (string): The updated name of the project, this name appears in reports.\n\n\n**Successful Response (200 OK):**\nProject updated successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "modify-project",
      "path": "/organization/projects/{project_id}",
      "method": "POST",
      "summary": "Modify project",
      "tags": [
        "Projects"
      ]
    }
  },
  {
    "content": "# Operation: List project API keys\n\n**Endpoint:** `GET /organization/projects/{project_id}/api_keys`\n\n**Tags:** Projects\n\n\n**Description:**\nReturns a list of API keys in the project.\n\n\n**Parameters:**\n\n- **`project_id`** (path, required, string): The ID of the project.\n\n- **`limit`** (query, optional, integer): A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n\n- **`after`** (query, optional, string): A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n\n\n**Successful Response (200 OK):**\nProject API keys listed successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "list-project-api-keys",
      "path": "/organization/projects/{project_id}/api_keys",
      "method": "GET",
      "summary": "List project API keys",
      "tags": [
        "Projects"
      ]
    }
  },
  {
    "content": "# Operation: Retrieve project API key\n\n**Endpoint:** `GET /organization/projects/{project_id}/api_keys/{key_id}`\n\n**Tags:** Projects\n\n\n**Description:**\nRetrieves an API key in the project.\n\n\n**Parameters:**\n\n- **`project_id`** (path, required, string): The ID of the project.\n\n- **`key_id`** (path, required, string): The ID of the API key.\n\n\n**Successful Response (200 OK):**\nProject API key retrieved successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "retrieve-project-api-key",
      "path": "/organization/projects/{project_id}/api_keys/{key_id}",
      "method": "GET",
      "summary": "Retrieve project API key",
      "tags": [
        "Projects"
      ]
    }
  },
  {
    "content": "# Operation: Delete project API key\n\n**Endpoint:** `DELETE /organization/projects/{project_id}/api_keys/{key_id}`\n\n**Tags:** Projects\n\n\n**Description:**\nDeletes an API key from the project.\n\n\n**Parameters:**\n\n- **`project_id`** (path, required, string): The ID of the project.\n\n- **`key_id`** (path, required, string): The ID of the API key.\n\n\n**Successful Response (200 OK):**\nProject API key deleted successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "delete-project-api-key",
      "path": "/organization/projects/{project_id}/api_keys/{key_id}",
      "method": "DELETE",
      "summary": "Delete project API key",
      "tags": [
        "Projects"
      ]
    }
  },
  {
    "content": "# Operation: Archive project\n\n**Endpoint:** `POST /organization/projects/{project_id}/archive`\n\n**Tags:** Projects\n\n\n**Description:**\nArchives a project in the organization. Archived projects cannot be used or updated.\n\n\n**Parameters:**\n\n- **`project_id`** (path, required, string): The ID of the project.\n\n\n**Successful Response (200 OK):**\nProject archived successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "archive-project",
      "path": "/organization/projects/{project_id}/archive",
      "method": "POST",
      "summary": "Archive project",
      "tags": [
        "Projects"
      ]
    }
  },
  {
    "content": "# Operation: List project certificates\n\n**Endpoint:** `GET /organization/projects/{project_id}/certificates`\n\n**Tags:** Certificates\n\n\n**Description:**\nList certificates for this project.\n\n\n**Parameters:**\n\n- **`project_id`** (path, required, string): The ID of the project.\n\n- **`limit`** (query, optional, integer): A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n\n- **`after`** (query, optional, string): A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n\n- **`order`** (query, optional, string): Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n\n\n**Successful Response (200 OK):**\nCertificates listed successfully.\n\n\n**Code Examples:**\n\n\n```\nrequest\n```\n\n\n```\nresponse\n```",
    "metadata": {
      "operationId": "listProjectCertificates",
      "path": "/organization/projects/{project_id}/certificates",
      "method": "GET",
      "summary": "List project certificates",
      "tags": [
        "Certificates"
      ]
    }
  },
  {
    "content": "# Operation: Activate certificates for project\n\n**Endpoint:** `POST /organization/projects/{project_id}/certificates/activate`\n\n**Tags:** Certificates\n\n\n**Description:**\nActivate certificates at the project level.\n\nYou can atomically and idempotently activate up to 10 certificates at a time.\n\n\n**Parameters:**\n\n- **`project_id`** (path, required, string): The ID of the project.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `certificate_ids` (array): No description.\n\n\n**Successful Response (200 OK):**\nCertificates activated successfully.\n\n\n**Code Examples:**\n\n\n```\nrequest\n```\n\n\n```\nresponse\n```",
    "metadata": {
      "operationId": "activateProjectCertificates",
      "path": "/organization/projects/{project_id}/certificates/activate",
      "method": "POST",
      "summary": "Activate certificates for project",
      "tags": [
        "Certificates"
      ]
    }
  },
  {
    "content": "# Operation: Deactivate certificates for project\n\n**Endpoint:** `POST /organization/projects/{project_id}/certificates/deactivate`\n\n**Tags:** Certificates\n\n\n**Description:**\nDeactivate certificates at the project level. You can atomically and \nidempotently deactivate up to 10 certificates at a time.\n\n\n**Parameters:**\n\n- **`project_id`** (path, required, string): The ID of the project.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `certificate_ids` (array): No description.\n\n\n**Successful Response (200 OK):**\nCertificates deactivated successfully.\n\n\n**Code Examples:**\n\n\n```\nrequest\n```\n\n\n```\nresponse\n```",
    "metadata": {
      "operationId": "deactivateProjectCertificates",
      "path": "/organization/projects/{project_id}/certificates/deactivate",
      "method": "POST",
      "summary": "Deactivate certificates for project",
      "tags": [
        "Certificates"
      ]
    }
  },
  {
    "content": "# Operation: List project rate limits\n\n**Endpoint:** `GET /organization/projects/{project_id}/rate_limits`\n\n**Tags:** Projects\n\n\n**Description:**\nReturns the rate limits per model for a project.\n\n\n**Parameters:**\n\n- **`project_id`** (path, required, string): The ID of the project.\n\n- **`limit`** (query, optional, integer): A limit on the number of objects to be returned. The default is 100.\n\n- **`after`** (query, optional, string): A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n\n- **`before`** (query, optional, string): A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, beginning with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n\n\n**Successful Response (200 OK):**\nProject rate limits listed successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```\n\n\n```\nerror_response\n```",
    "metadata": {
      "operationId": "list-project-rate-limits",
      "path": "/organization/projects/{project_id}/rate_limits",
      "method": "GET",
      "summary": "List project rate limits",
      "tags": [
        "Projects"
      ]
    }
  },
  {
    "content": "# Operation: Modify project rate limit\n\n**Endpoint:** `POST /organization/projects/{project_id}/rate_limits/{rate_limit_id}`\n\n**Tags:** Projects\n\n\n**Description:**\nUpdates a project rate limit.\n\n\n**Parameters:**\n\n- **`project_id`** (path, required, string): The ID of the project.\n\n- **`rate_limit_id`** (path, required, string): The ID of the rate limit.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `max_requests_per_1_minute` (integer): The maximum requests per minute.\n- `max_tokens_per_1_minute` (integer): The maximum tokens per minute.\n- `max_images_per_1_minute` (integer): The maximum images per minute. Only relevant for certain models.\n- `max_audio_megabytes_per_1_minute` (integer): The maximum audio megabytes per minute. Only relevant for certain models.\n- `max_requests_per_1_day` (integer): The maximum requests per day. Only relevant for certain models.\n- `batch_1_day_max_input_tokens` (integer): The maximum batch input tokens per day. Only relevant for certain models.\n\n\n**Successful Response (200 OK):**\nProject rate limit updated successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```\n\n\n```\nerror_response\n```",
    "metadata": {
      "operationId": "update-project-rate-limits",
      "path": "/organization/projects/{project_id}/rate_limits/{rate_limit_id}",
      "method": "POST",
      "summary": "Modify project rate limit",
      "tags": [
        "Projects"
      ]
    }
  },
  {
    "content": "# Operation: List project service accounts\n\n**Endpoint:** `GET /organization/projects/{project_id}/service_accounts`\n\n**Tags:** Projects\n\n\n**Description:**\nReturns a list of service accounts in the project.\n\n\n**Parameters:**\n\n- **`project_id`** (path, required, string): The ID of the project.\n\n- **`limit`** (query, optional, integer): A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n\n- **`after`** (query, optional, string): A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n\n\n**Successful Response (200 OK):**\nProject service accounts listed successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "list-project-service-accounts",
      "path": "/organization/projects/{project_id}/service_accounts",
      "method": "GET",
      "summary": "List project service accounts",
      "tags": [
        "Projects"
      ]
    }
  },
  {
    "content": "# Operation: Create project service account\n\n**Endpoint:** `POST /organization/projects/{project_id}/service_accounts`\n\n**Tags:** Projects\n\n\n**Description:**\nCreates a new service account in the project. This also returns an unredacted API key for the service account.\n\n\n**Parameters:**\n\n- **`project_id`** (path, required, string): The ID of the project.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `name` (string): The name of the service account being created.\n\n\n**Successful Response (200 OK):**\nProject service account created successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "create-project-service-account",
      "path": "/organization/projects/{project_id}/service_accounts",
      "method": "POST",
      "summary": "Create project service account",
      "tags": [
        "Projects"
      ]
    }
  },
  {
    "content": "# Operation: Retrieve project service account\n\n**Endpoint:** `GET /organization/projects/{project_id}/service_accounts/{service_account_id}`\n\n**Tags:** Projects\n\n\n**Description:**\nRetrieves a service account in the project.\n\n\n**Parameters:**\n\n- **`project_id`** (path, required, string): The ID of the project.\n\n- **`service_account_id`** (path, required, string): The ID of the service account.\n\n\n**Successful Response (200 OK):**\nProject service account retrieved successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "retrieve-project-service-account",
      "path": "/organization/projects/{project_id}/service_accounts/{service_account_id}",
      "method": "GET",
      "summary": "Retrieve project service account",
      "tags": [
        "Projects"
      ]
    }
  },
  {
    "content": "# Operation: Delete project service account\n\n**Endpoint:** `DELETE /organization/projects/{project_id}/service_accounts/{service_account_id}`\n\n**Tags:** Projects\n\n\n**Description:**\nDeletes a service account from the project.\n\n\n**Parameters:**\n\n- **`project_id`** (path, required, string): The ID of the project.\n\n- **`service_account_id`** (path, required, string): The ID of the service account.\n\n\n**Successful Response (200 OK):**\nProject service account deleted successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "delete-project-service-account",
      "path": "/organization/projects/{project_id}/service_accounts/{service_account_id}",
      "method": "DELETE",
      "summary": "Delete project service account",
      "tags": [
        "Projects"
      ]
    }
  },
  {
    "content": "# Operation: List project users\n\n**Endpoint:** `GET /organization/projects/{project_id}/users`\n\n**Tags:** Projects\n\n\n**Description:**\nReturns a list of users in the project.\n\n\n**Parameters:**\n\n- **`project_id`** (path, required, string): The ID of the project.\n\n- **`limit`** (query, optional, integer): A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n\n- **`after`** (query, optional, string): A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n\n\n**Successful Response (200 OK):**\nProject users listed successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "list-project-users",
      "path": "/organization/projects/{project_id}/users",
      "method": "GET",
      "summary": "List project users",
      "tags": [
        "Projects"
      ]
    }
  },
  {
    "content": "# Operation: Create project user\n\n**Endpoint:** `POST /organization/projects/{project_id}/users`\n\n**Tags:** Projects\n\n\n**Description:**\nAdds a user to the project. Users must already be members of the organization to be added to a project.\n\n\n**Parameters:**\n\n- **`project_id`** (path, required, string): The ID of the project.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `user_id` (string): The ID of the user.\n- `role` (string): `owner` or `member`\n\n\n**Successful Response (200 OK):**\nUser added to project successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "create-project-user",
      "path": "/organization/projects/{project_id}/users",
      "method": "POST",
      "summary": "Create project user",
      "tags": [
        "Projects"
      ]
    }
  },
  {
    "content": "# Operation: Retrieve project user\n\n**Endpoint:** `GET /organization/projects/{project_id}/users/{user_id}`\n\n**Tags:** Projects\n\n\n**Description:**\nRetrieves a user in the project.\n\n\n**Parameters:**\n\n- **`project_id`** (path, required, string): The ID of the project.\n\n- **`user_id`** (path, required, string): The ID of the user.\n\n\n**Successful Response (200 OK):**\nProject user retrieved successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "retrieve-project-user",
      "path": "/organization/projects/{project_id}/users/{user_id}",
      "method": "GET",
      "summary": "Retrieve project user",
      "tags": [
        "Projects"
      ]
    }
  },
  {
    "content": "# Operation: Modify project user\n\n**Endpoint:** `POST /organization/projects/{project_id}/users/{user_id}`\n\n**Tags:** Projects\n\n\n**Description:**\nModifies a user's role in the project.\n\n\n**Parameters:**\n\n- **`project_id`** (path, required, string): The ID of the project.\n\n- **`user_id`** (path, required, string): The ID of the user.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `role` (string): `owner` or `member`\n\n\n**Successful Response (200 OK):**\nProject user's role updated successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "modify-project-user",
      "path": "/organization/projects/{project_id}/users/{user_id}",
      "method": "POST",
      "summary": "Modify project user",
      "tags": [
        "Projects"
      ]
    }
  },
  {
    "content": "# Operation: Delete project user\n\n**Endpoint:** `DELETE /organization/projects/{project_id}/users/{user_id}`\n\n**Tags:** Projects\n\n\n**Description:**\nDeletes a user from the project.\n\n\n**Parameters:**\n\n- **`project_id`** (path, required, string): The ID of the project.\n\n- **`user_id`** (path, required, string): The ID of the user.\n\n\n**Successful Response (200 OK):**\nProject user deleted successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "delete-project-user",
      "path": "/organization/projects/{project_id}/users/{user_id}",
      "method": "DELETE",
      "summary": "Delete project user",
      "tags": [
        "Projects"
      ]
    }
  },
  {
    "content": "# Operation: Audio speeches\n\n**Endpoint:** `GET /organization/usage/audio_speeches`\n\n**Tags:** Usage\n\n\n**Description:**\nGet audio speeches usage details for the organization.\n\n\n**Parameters:**\n\n- **`start_time`** (query, required, integer): Start time (Unix seconds) of the query time range, inclusive.\n\n- **`end_time`** (query, optional, integer): End time (Unix seconds) of the query time range, exclusive.\n\n- **`bucket_width`** (query, optional, string): Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.\n\n- **`project_ids`** (query, optional, array): Return only usage for these projects.\n\n- **`user_ids`** (query, optional, array): Return only usage for these users.\n\n- **`api_key_ids`** (query, optional, array): Return only usage for these API keys.\n\n- **`models`** (query, optional, array): Return only usage for these models.\n\n- **`group_by`** (query, optional, array): Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them.\n\n- **`limit`** (query, optional, integer): Specifies the number of buckets to return. - `bucket_width=1d`: default: 7, max: 31 - `bucket_width=1h`: default: 24, max: 168 - `bucket_width=1m`: default: 60, max: 1440\n\n- **`page`** (query, optional, string): A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.\n\n\n**Successful Response (200 OK):**\nUsage data retrieved successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "usage-audio-speeches",
      "path": "/organization/usage/audio_speeches",
      "method": "GET",
      "summary": "Audio speeches",
      "tags": [
        "Usage"
      ]
    }
  },
  {
    "content": "# Operation: Audio transcriptions\n\n**Endpoint:** `GET /organization/usage/audio_transcriptions`\n\n**Tags:** Usage\n\n\n**Description:**\nGet audio transcriptions usage details for the organization.\n\n\n**Parameters:**\n\n- **`start_time`** (query, required, integer): Start time (Unix seconds) of the query time range, inclusive.\n\n- **`end_time`** (query, optional, integer): End time (Unix seconds) of the query time range, exclusive.\n\n- **`bucket_width`** (query, optional, string): Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.\n\n- **`project_ids`** (query, optional, array): Return only usage for these projects.\n\n- **`user_ids`** (query, optional, array): Return only usage for these users.\n\n- **`api_key_ids`** (query, optional, array): Return only usage for these API keys.\n\n- **`models`** (query, optional, array): Return only usage for these models.\n\n- **`group_by`** (query, optional, array): Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them.\n\n- **`limit`** (query, optional, integer): Specifies the number of buckets to return. - `bucket_width=1d`: default: 7, max: 31 - `bucket_width=1h`: default: 24, max: 168 - `bucket_width=1m`: default: 60, max: 1440\n\n- **`page`** (query, optional, string): A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.\n\n\n**Successful Response (200 OK):**\nUsage data retrieved successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "usage-audio-transcriptions",
      "path": "/organization/usage/audio_transcriptions",
      "method": "GET",
      "summary": "Audio transcriptions",
      "tags": [
        "Usage"
      ]
    }
  },
  {
    "content": "# Operation: Code interpreter sessions\n\n**Endpoint:** `GET /organization/usage/code_interpreter_sessions`\n\n**Tags:** Usage\n\n\n**Description:**\nGet code interpreter sessions usage details for the organization.\n\n\n**Parameters:**\n\n- **`start_time`** (query, required, integer): Start time (Unix seconds) of the query time range, inclusive.\n\n- **`end_time`** (query, optional, integer): End time (Unix seconds) of the query time range, exclusive.\n\n- **`bucket_width`** (query, optional, string): Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.\n\n- **`project_ids`** (query, optional, array): Return only usage for these projects.\n\n- **`group_by`** (query, optional, array): Group the usage data by the specified fields. Support fields include `project_id`.\n\n- **`limit`** (query, optional, integer): Specifies the number of buckets to return. - `bucket_width=1d`: default: 7, max: 31 - `bucket_width=1h`: default: 24, max: 168 - `bucket_width=1m`: default: 60, max: 1440\n\n- **`page`** (query, optional, string): A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.\n\n\n**Successful Response (200 OK):**\nUsage data retrieved successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "usage-code-interpreter-sessions",
      "path": "/organization/usage/code_interpreter_sessions",
      "method": "GET",
      "summary": "Code interpreter sessions",
      "tags": [
        "Usage"
      ]
    }
  },
  {
    "content": "# Operation: Completions\n\n**Endpoint:** `GET /organization/usage/completions`\n\n**Tags:** Usage\n\n\n**Description:**\nGet completions usage details for the organization.\n\n\n**Parameters:**\n\n- **`start_time`** (query, required, integer): Start time (Unix seconds) of the query time range, inclusive.\n\n- **`end_time`** (query, optional, integer): End time (Unix seconds) of the query time range, exclusive.\n\n- **`bucket_width`** (query, optional, string): Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.\n\n- **`project_ids`** (query, optional, array): Return only usage for these projects.\n\n- **`user_ids`** (query, optional, array): Return only usage for these users.\n\n- **`api_key_ids`** (query, optional, array): Return only usage for these API keys.\n\n- **`models`** (query, optional, array): Return only usage for these models.\n\n- **`batch`** (query, optional, boolean): If `true`, return batch jobs only. If `false`, return non-batch jobs only. By default, return both.\n\n- **`group_by`** (query, optional, array): Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model`, `batch` or any combination of them.\n\n- **`limit`** (query, optional, integer): Specifies the number of buckets to return. - `bucket_width=1d`: default: 7, max: 31 - `bucket_width=1h`: default: 24, max: 168 - `bucket_width=1m`: default: 60, max: 1440\n\n- **`page`** (query, optional, string): A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.\n\n\n**Successful Response (200 OK):**\nUsage data retrieved successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "usage-completions",
      "path": "/organization/usage/completions",
      "method": "GET",
      "summary": "Completions",
      "tags": [
        "Usage"
      ]
    }
  },
  {
    "content": "# Operation: Embeddings\n\n**Endpoint:** `GET /organization/usage/embeddings`\n\n**Tags:** Usage\n\n\n**Description:**\nGet embeddings usage details for the organization.\n\n\n**Parameters:**\n\n- **`start_time`** (query, required, integer): Start time (Unix seconds) of the query time range, inclusive.\n\n- **`end_time`** (query, optional, integer): End time (Unix seconds) of the query time range, exclusive.\n\n- **`bucket_width`** (query, optional, string): Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.\n\n- **`project_ids`** (query, optional, array): Return only usage for these projects.\n\n- **`user_ids`** (query, optional, array): Return only usage for these users.\n\n- **`api_key_ids`** (query, optional, array): Return only usage for these API keys.\n\n- **`models`** (query, optional, array): Return only usage for these models.\n\n- **`group_by`** (query, optional, array): Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them.\n\n- **`limit`** (query, optional, integer): Specifies the number of buckets to return. - `bucket_width=1d`: default: 7, max: 31 - `bucket_width=1h`: default: 24, max: 168 - `bucket_width=1m`: default: 60, max: 1440\n\n- **`page`** (query, optional, string): A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.\n\n\n**Successful Response (200 OK):**\nUsage data retrieved successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "usage-embeddings",
      "path": "/organization/usage/embeddings",
      "method": "GET",
      "summary": "Embeddings",
      "tags": [
        "Usage"
      ]
    }
  },
  {
    "content": "# Operation: Images\n\n**Endpoint:** `GET /organization/usage/images`\n\n**Tags:** Usage\n\n\n**Description:**\nGet images usage details for the organization.\n\n\n**Parameters:**\n\n- **`start_time`** (query, required, integer): Start time (Unix seconds) of the query time range, inclusive.\n\n- **`end_time`** (query, optional, integer): End time (Unix seconds) of the query time range, exclusive.\n\n- **`bucket_width`** (query, optional, string): Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.\n\n- **`sources`** (query, optional, array): Return only usages for these sources. Possible values are `image.generation`, `image.edit`, `image.variation` or any combination of them.\n\n- **`sizes`** (query, optional, array): Return only usages for these image sizes. Possible values are `256x256`, `512x512`, `1024x1024`, `1792x1792`, `1024x1792` or any combination of them.\n\n- **`project_ids`** (query, optional, array): Return only usage for these projects.\n\n- **`user_ids`** (query, optional, array): Return only usage for these users.\n\n- **`api_key_ids`** (query, optional, array): Return only usage for these API keys.\n\n- **`models`** (query, optional, array): Return only usage for these models.\n\n- **`group_by`** (query, optional, array): Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model`, `size`, `source` or any combination of them.\n\n- **`limit`** (query, optional, integer): Specifies the number of buckets to return. - `bucket_width=1d`: default: 7, max: 31 - `bucket_width=1h`: default: 24, max: 168 - `bucket_width=1m`: default: 60, max: 1440\n\n- **`page`** (query, optional, string): A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.\n\n\n**Successful Response (200 OK):**\nUsage data retrieved successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "usage-images",
      "path": "/organization/usage/images",
      "method": "GET",
      "summary": "Images",
      "tags": [
        "Usage"
      ]
    }
  },
  {
    "content": "# Operation: Moderations\n\n**Endpoint:** `GET /organization/usage/moderations`\n\n**Tags:** Usage\n\n\n**Description:**\nGet moderations usage details for the organization.\n\n\n**Parameters:**\n\n- **`start_time`** (query, required, integer): Start time (Unix seconds) of the query time range, inclusive.\n\n- **`end_time`** (query, optional, integer): End time (Unix seconds) of the query time range, exclusive.\n\n- **`bucket_width`** (query, optional, string): Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.\n\n- **`project_ids`** (query, optional, array): Return only usage for these projects.\n\n- **`user_ids`** (query, optional, array): Return only usage for these users.\n\n- **`api_key_ids`** (query, optional, array): Return only usage for these API keys.\n\n- **`models`** (query, optional, array): Return only usage for these models.\n\n- **`group_by`** (query, optional, array): Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them.\n\n- **`limit`** (query, optional, integer): Specifies the number of buckets to return. - `bucket_width=1d`: default: 7, max: 31 - `bucket_width=1h`: default: 24, max: 168 - `bucket_width=1m`: default: 60, max: 1440\n\n- **`page`** (query, optional, string): A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.\n\n\n**Successful Response (200 OK):**\nUsage data retrieved successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "usage-moderations",
      "path": "/organization/usage/moderations",
      "method": "GET",
      "summary": "Moderations",
      "tags": [
        "Usage"
      ]
    }
  },
  {
    "content": "# Operation: Vector stores\n\n**Endpoint:** `GET /organization/usage/vector_stores`\n\n**Tags:** Usage\n\n\n**Description:**\nGet vector stores usage details for the organization.\n\n\n**Parameters:**\n\n- **`start_time`** (query, required, integer): Start time (Unix seconds) of the query time range, inclusive.\n\n- **`end_time`** (query, optional, integer): End time (Unix seconds) of the query time range, exclusive.\n\n- **`bucket_width`** (query, optional, string): Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.\n\n- **`project_ids`** (query, optional, array): Return only usage for these projects.\n\n- **`group_by`** (query, optional, array): Group the usage data by the specified fields. Support fields include `project_id`.\n\n- **`limit`** (query, optional, integer): Specifies the number of buckets to return. - `bucket_width=1d`: default: 7, max: 31 - `bucket_width=1h`: default: 24, max: 168 - `bucket_width=1m`: default: 60, max: 1440\n\n- **`page`** (query, optional, string): A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.\n\n\n**Successful Response (200 OK):**\nUsage data retrieved successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "usage-vector-stores",
      "path": "/organization/usage/vector_stores",
      "method": "GET",
      "summary": "Vector stores",
      "tags": [
        "Usage"
      ]
    }
  },
  {
    "content": "# Operation: List users\n\n**Endpoint:** `GET /organization/users`\n\n**Tags:** Users\n\n\n**Description:**\nLists all of the users in the organization.\n\n\n**Parameters:**\n\n- **`limit`** (query, optional, integer): A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n\n- **`after`** (query, optional, string): A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n\n- **`emails`** (query, optional, array): Filter by the email address of users.\n\n\n**Successful Response (200 OK):**\nUsers listed successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "list-users",
      "path": "/organization/users",
      "method": "GET",
      "summary": "List users",
      "tags": [
        "Users"
      ]
    }
  },
  {
    "content": "# Operation: Retrieve user\n\n**Endpoint:** `GET /organization/users/{user_id}`\n\n**Tags:** Users\n\n\n**Description:**\nRetrieves a user by their identifier.\n\n\n**Parameters:**\n\n- **`user_id`** (path, required, string): The ID of the user.\n\n\n**Successful Response (200 OK):**\nUser retrieved successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "retrieve-user",
      "path": "/organization/users/{user_id}",
      "method": "GET",
      "summary": "Retrieve user",
      "tags": [
        "Users"
      ]
    }
  },
  {
    "content": "# Operation: Modify user\n\n**Endpoint:** `POST /organization/users/{user_id}`\n\n**Tags:** Users\n\n\n**Description:**\nModifies a user's role in the organization.\n\n\n**Parameters:**\n\n- **`user_id`** (path, required, string): The ID of the user.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `role` (string): `owner` or `reader`\n\n\n**Successful Response (200 OK):**\nUser role updated successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "modify-user",
      "path": "/organization/users/{user_id}",
      "method": "POST",
      "summary": "Modify user",
      "tags": [
        "Users"
      ]
    }
  },
  {
    "content": "# Operation: Delete user\n\n**Endpoint:** `DELETE /organization/users/{user_id}`\n\n**Tags:** Users\n\n\n**Description:**\nDeletes a user from the organization.\n\n\n**Parameters:**\n\n- **`user_id`** (path, required, string): The ID of the user.\n\n\n**Successful Response (200 OK):**\nUser deleted successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "delete-user",
      "path": "/organization/users/{user_id}",
      "method": "DELETE",
      "summary": "Delete user",
      "tags": [
        "Users"
      ]
    }
  },
  {
    "content": "# Operation: Create client secret\n\n**Endpoint:** `POST /realtime/client_secrets`\n\n**Tags:** Realtime\n\n\n**Description:**\nCreate a Realtime client secret with an associated session configuration.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `expires_after` (object): Configuration for the client secret expiration. Expiration refers to the time after which a client secret will no longer be valid for creating sessions. The session itself may continue after that time once started. A secret can be used to create multiple sessions until it expires.\n- `session` (N/A): Session configuration to use for the client secret. Choose either a realtime session or a transcription session.\n\n\n**Successful Response (200 OK):**\nClient secret created successfully.\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "create-realtime-client-secret",
      "path": "/realtime/client_secrets",
      "method": "POST",
      "summary": "Create client secret",
      "tags": [
        "Realtime"
      ]
    }
  },
  {
    "content": "# Operation: Create session\n\n**Endpoint:** `POST /realtime/sessions`\n\n**Tags:** Realtime\n\n\n**Description:**\nCreate an ephemeral API token for use in client-side applications with the\nRealtime API. Can be configured with the same session parameters as the\n`session.update` client event.\n\nIt responds with a session object, plus a `client_secret` key which contains\na usable ephemeral API token that can be used to authenticate browser clients\nfor the Realtime API.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `client_secret` (object): Ephemeral key returned by the API.\n- `modalities` (N/A): The set of modalities the model can respond with. To disable audio, set this to [\"text\"].\n- `instructions` (string): The default system instructions (i.e. system message) prepended to model calls. This field allows the client to guide the model on desired responses. The model can be instructed on response content and format, (e.g. \"be extremely succinct\", \"act friendly\", \"here are examples of good responses\") and on audio behavior (e.g. \"talk quickly\", \"inject emotion into your voice\", \"laugh frequently\"). The instructions are not guaranteed to be followed by the model, but they provide guidance to the model on the desired behavior. Note that the server sets default instructions which will be used if this field is not set and are visible in the `session.created` event at the start of the session.\n- `voice` (N/A): The voice the model uses to respond. Voice cannot be changed during the session once the model has responded with audio at least once. Current voice options are `alloy`, `ash`, `ballad`, `coral`, `echo`, `sage`, `shimmer`, and `verse`.\n- `input_audio_format` (string): The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n- `output_audio_format` (string): The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n- `input_audio_transcription` (object): Configuration for input audio transcription, defaults to off and can be set to `null` to turn off once on. Input audio transcription is not native to the model, since the model consumes audio directly. Transcription runs asynchronously and should be treated as rough guidance rather than the representation understood by the model.\n- `speed` (number): The speed of the model's spoken response. 1.0 is the default speed. 0.25 is the minimum speed. 1.5 is the maximum speed. This value can only be changed in between model turns, not while a response is in progress.\n- `tracing` (N/A): Configuration options for tracing. Set to null to disable tracing. Once tracing is enabled for a session, the configuration cannot be modified. `auto` will create a trace for the session with default values for the workflow name, group id, and metadata.\n- `turn_detection` (object): Configuration for turn detection. Can be set to `null` to turn off. Server VAD means that the model will detect the start and end of speech based on audio volume and respond at the end of user speech.\n- `tools` (array): Tools (functions) available to the model.\n- `tool_choice` (string): How the model chooses tools. Options are `auto`, `none`, `required`, or specify a function.\n- `temperature` (number): Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.\n- `max_response_output_tokens` (N/A): Maximum number of output tokens for a single assistant response, inclusive of tool calls. Provide an integer between 1 and 4096 to limit output tokens, or `inf` for the maximum available tokens for a given model. Defaults to `inf`.\n- `truncation` (N/A): No description.\n- `prompt` (N/A): No description.\n\n\n**Successful Response (200 OK):**\nSession created successfully.\n\n\n**Code Examples:**\n\n\n```\nrequest\n```\n\n\n```\nresponse\n```",
    "metadata": {
      "operationId": "create-realtime-session",
      "path": "/realtime/sessions",
      "method": "POST",
      "summary": "Create session",
      "tags": [
        "Realtime"
      ]
    }
  },
  {
    "content": "# Operation: Create transcription session\n\n**Endpoint:** `POST /realtime/transcription_sessions`\n\n**Tags:** Realtime\n\n\n**Description:**\nCreate an ephemeral API token for use in client-side applications with the\nRealtime API specifically for realtime transcriptions. \nCan be configured with the same session parameters as the `transcription_session.update` client event.\n\nIt responds with a session object, plus a `client_secret` key which contains\na usable ephemeral API token that can be used to authenticate browser clients\nfor the Realtime API.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `turn_detection` (object): Configuration for turn detection. Can be set to `null` to turn off. Server VAD means that the model will detect the start and end of speech based on audio volume and respond at the end of user speech.\n- `input_audio_noise_reduction` (object): Configuration for input audio noise reduction. This can be set to `null` to turn off. Noise reduction filters audio added to the input audio buffer before it is sent to VAD and the model. Filtering the audio can improve VAD and turn detection accuracy (reducing false positives) and model performance by improving perception of the input audio.\n- `input_audio_format` (string): The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. For `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate, single channel (mono), and little-endian byte order.\n- `input_audio_transcription` (N/A): Configuration for input audio transcription. The client can optionally set the language and prompt for transcription, these offer additional guidance to the transcription service.\n- `include` (array): The set of items to include in the transcription. Current available items are: `item.input_audio_transcription.logprobs`\n\n\n**Successful Response (200 OK):**\nSession created successfully.\n\n\n**Code Examples:**\n\n\n```\nrequest\n```\n\n\n```\nresponse\n```",
    "metadata": {
      "operationId": "create-realtime-transcription-session",
      "path": "/realtime/transcription_sessions",
      "method": "POST",
      "summary": "Create transcription session",
      "tags": [
        "Realtime"
      ]
    }
  },
  {
    "content": "# Operation: Get a model response\n\n**Endpoint:** `GET /responses/{response_id}`\n\n**Tags:** Responses\n\n\n**Description:**\nRetrieves a model response with the given ID.\n\n\n**Parameters:**\n\n- **`response_id`** (path, required, string): The ID of the response to retrieve.\n\n- **`include`** (query, optional, array): Additional fields to include in the response. See the `include` parameter for Response creation above for more information.\n\n- **`stream`** (query, optional, boolean): If set to true, the model response data will be streamed to the client as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format). See the [Streaming section below](https://platform.openai.com/docs/api-reference/responses-streaming) for more information.\n\n- **`starting_after`** (query, optional, integer): The sequence number of the event after which to start streaming.\n\n- **`include_obfuscation`** (query, optional, boolean): When true, stream obfuscation will be enabled. Stream obfuscation adds random characters to an `obfuscation` field on streaming delta events to normalize payload sizes as a mitigation to certain side-channel attacks. These obfuscation fields are included by default, but add a small amount of overhead to the data stream. You can set `include_obfuscation` to false to optimize for bandwidth if you trust the network links between your application and the OpenAI API.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "getResponse",
      "path": "/responses/{response_id}",
      "method": "GET",
      "summary": "Get a model response",
      "tags": [
        "Responses"
      ]
    }
  },
  {
    "content": "# Operation: Delete a model response\n\n**Endpoint:** `DELETE /responses/{response_id}`\n\n**Tags:** Responses\n\n\n**Description:**\nDeletes a model response with the given ID.\n\n\n**Parameters:**\n\n- **`response_id`** (path, required, string): The ID of the response to delete.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "deleteResponse",
      "path": "/responses/{response_id}",
      "method": "DELETE",
      "summary": "Delete a model response",
      "tags": [
        "Responses"
      ]
    }
  },
  {
    "content": "# Operation: Cancel a response\n\n**Endpoint:** `POST /responses/{response_id}/cancel`\n\n**Tags:** Responses\n\n\n**Description:**\nCancels a model response with the given ID. Only responses created with\nthe `background` parameter set to `true` can be cancelled. \n[Learn more](https://platform.openai.com/docs/guides/background).\n\n\n**Parameters:**\n\n- **`response_id`** (path, required, string): The ID of the response to cancel.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "cancelResponse",
      "path": "/responses/{response_id}/cancel",
      "method": "POST",
      "summary": "Cancel a response",
      "tags": [
        "Responses"
      ]
    }
  },
  {
    "content": "# Operation: List input items\n\n**Endpoint:** `GET /responses/{response_id}/input_items`\n\n**Tags:** Responses\n\n\n**Description:**\nReturns a list of input items for a given response.\n\n\n**Parameters:**\n\n- **`response_id`** (path, required, string): The ID of the response to retrieve input items for.\n\n- **`limit`** (query, optional, integer): A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n\n- **`order`** (query, optional, string): The order to return the input items in. Default is `desc`. - `asc`: Return the input items in ascending order. - `desc`: Return the input items in descending order.\n\n- **`after`** (query, optional, string): An item ID to list items after, used in pagination.\n\n- **`include`** (query, optional, array): Additional fields to include in the response. See the `include` parameter for Response creation above for more information.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "listInputItems",
      "path": "/responses/{response_id}/input_items",
      "method": "GET",
      "summary": "List input items",
      "tags": [
        "Responses"
      ]
    }
  },
  {
    "content": "# Operation: Create thread\n\n**Endpoint:** `POST /threads`\n\n**Tags:** Assistants\n\n\n**Description:**\nCreate a thread.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `messages` (array): A list of [messages](https://platform.openai.com/docs/api-reference/messages) to start the thread with.\n- `tool_resources` (object): A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n- `metadata` (N/A): No description.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n**Curl:**\n```curl\ncurl https://api.openai.com/v1/threads \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"OpenAI-Beta: assistants=v2\" \\\n  -d ''\n```\n\n\n**Python:**\n```python\nfrom openai import OpenAI\n\nclient = OpenAI(\n    api_key=\"My API Key\",\n)\nthread = client.beta.threads.create()\nprint(thread.id)\n```\n\n\n**Node.js:**\n```javascript\nimport OpenAI from 'openai';\n\nconst client = new OpenAI({\n  apiKey: 'My API Key',\n});\n\nconst thread = await client.beta.threads.create();\n\nconsole.log(thread.id);\n```\n\n\n**Go:**\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/openai/openai-go\"\n  \"github.com/openai/openai-go/option\"\n)\n\nfunc main() {\n  client := openai.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  thread, err := client.Beta.Threads.New(context.TODO(), openai.BetaThreadNewParams{\n\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", thread.ID)\n}\n```\n\n\n**Java:**\n```java\npackage com.openai.example;\n\nimport com.openai.client.OpenAIClient;\nimport com.openai.client.okhttp.OpenAIOkHttpClient;\nimport com.openai.models.beta.threads.Thread;\nimport com.openai.models.beta.threads.ThreadCreateParams;\n\npublic final class Main {\n    private Main() {}\n\n    public static void main(String[] args) {\n        OpenAIClient client = OpenAIOkHttpClient.fromEnv();\n\n        Thread thread = client.beta().threads().create();\n    }\n}\n```\n\n\n**Ruby:**\n```ruby\nrequire \"openai\"\n\nopenai = OpenAI::Client.new(api_key: \"My API Key\")\n\nthread = openai.beta.threads.create\n\nputs(thread)\n```\n\n\n**Curl:**\n```curl\ncurl https://api.openai.com/v1/threads \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n-H \"OpenAI-Beta: assistants=v2\" \\\n-d '{\n    \"messages\": [{\n      \"role\": \"user\",\n      \"content\": \"Hello, what is AI?\"\n    }, {\n      \"role\": \"user\",\n      \"content\": \"How does AI work? Explain it in simple terms.\"\n    }]\n  }'\n```\n\n\n**Python:**\n```python\nfrom openai import OpenAI\n\nclient = OpenAI(\n    api_key=\"My API Key\",\n)\nthread = client.beta.threads.create()\nprint(thread.id)\n```\n\n\n**Node.js:**\n```javascript\nimport OpenAI from 'openai';\n\nconst client = new OpenAI({\n  apiKey: 'My API Key',\n});\n\nconst thread = await client.beta.threads.create();\n\nconsole.log(thread.id);\n```\n\n\n**Go:**\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/openai/openai-go\"\n  \"github.com/openai/openai-go/option\"\n)\n\nfunc main() {\n  client := openai.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  thread, err := client.Beta.Threads.New(context.TODO(), openai.BetaThreadNewParams{\n\n  })\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", thread.ID)\n}\n```\n\n\n**Java:**\n```java\npackage com.openai.example;\n\nimport com.openai.client.OpenAIClient;\nimport com.openai.client.okhttp.OpenAIOkHttpClient;\nimport com.openai.models.beta.threads.Thread;\nimport com.openai.models.beta.threads.ThreadCreateParams;\n\npublic final class Main {\n    private Main() {}\n\n    public static void main(String[] args) {\n        OpenAIClient client = OpenAIOkHttpClient.fromEnv();\n\n        Thread thread = client.beta().threads().create();\n    }\n}\n```\n\n\n**Ruby:**\n```ruby\nrequire \"openai\"\n\nopenai = OpenAI::Client.new(api_key: \"My API Key\")\n\nthread = openai.beta.threads.create\n\nputs(thread)\n```",
    "metadata": {
      "operationId": "createThread",
      "path": "/threads",
      "method": "POST",
      "summary": "Create thread",
      "tags": [
        "Assistants"
      ]
    }
  },
  {
    "content": "# Operation: Retrieve thread\n\n**Endpoint:** `GET /threads/{thread_id}`\n\n**Tags:** Assistants\n\n\n**Description:**\nRetrieves a thread.\n\n\n**Parameters:**\n\n- **`thread_id`** (path, required, string): The ID of the thread to retrieve.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "getThread",
      "path": "/threads/{thread_id}",
      "method": "GET",
      "summary": "Retrieve thread",
      "tags": [
        "Assistants"
      ]
    }
  },
  {
    "content": "# Operation: Modify thread\n\n**Endpoint:** `POST /threads/{thread_id}`\n\n**Tags:** Assistants\n\n\n**Description:**\nModifies a thread.\n\n\n**Parameters:**\n\n- **`thread_id`** (path, required, string): The ID of the thread to modify. Only the `metadata` can be modified.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `tool_resources` (object): A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n- `metadata` (N/A): No description.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "modifyThread",
      "path": "/threads/{thread_id}",
      "method": "POST",
      "summary": "Modify thread",
      "tags": [
        "Assistants"
      ]
    }
  },
  {
    "content": "# Operation: Delete thread\n\n**Endpoint:** `DELETE /threads/{thread_id}`\n\n**Tags:** Assistants\n\n\n**Description:**\nDelete a thread.\n\n\n**Parameters:**\n\n- **`thread_id`** (path, required, string): The ID of the thread to delete.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "deleteThread",
      "path": "/threads/{thread_id}",
      "method": "DELETE",
      "summary": "Delete thread",
      "tags": [
        "Assistants"
      ]
    }
  },
  {
    "content": "# Operation: List messages\n\n**Endpoint:** `GET /threads/{thread_id}/messages`\n\n**Tags:** Assistants\n\n\n**Description:**\nReturns a list of messages for a given thread.\n\n\n**Parameters:**\n\n- **`thread_id`** (path, required, string): The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) the messages belong to.\n\n- **`limit`** (query, optional, integer): A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n\n- **`order`** (query, optional, string): Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n\n- **`after`** (query, optional, string): A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n\n- **`before`** (query, optional, string): A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n\n- **`run_id`** (query, optional, string): Filter messages by the run ID that generated them.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "listMessages",
      "path": "/threads/{thread_id}/messages",
      "method": "GET",
      "summary": "List messages",
      "tags": [
        "Assistants"
      ]
    }
  },
  {
    "content": "# Operation: Create message\n\n**Endpoint:** `POST /threads/{thread_id}/messages`\n\n**Tags:** Assistants\n\n\n**Description:**\nCreate a message.\n\n\n**Parameters:**\n\n- **`thread_id`** (path, required, string): The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) to create a message for.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `role` (string): The role of the entity that is creating the message. Allowed values include: - `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages. - `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.\n- `content` (N/A): No description.\n- `attachments` (array): A list of files attached to the message, and the tools they should be added to.\n- `metadata` (N/A): No description.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "createMessage",
      "path": "/threads/{thread_id}/messages",
      "method": "POST",
      "summary": "Create message",
      "tags": [
        "Assistants"
      ]
    }
  },
  {
    "content": "# Operation: Retrieve message\n\n**Endpoint:** `GET /threads/{thread_id}/messages/{message_id}`\n\n**Tags:** Assistants\n\n\n**Description:**\nRetrieve a message.\n\n\n**Parameters:**\n\n- **`thread_id`** (path, required, string): The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) to which this message belongs.\n\n- **`message_id`** (path, required, string): The ID of the message to retrieve.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "getMessage",
      "path": "/threads/{thread_id}/messages/{message_id}",
      "method": "GET",
      "summary": "Retrieve message",
      "tags": [
        "Assistants"
      ]
    }
  },
  {
    "content": "# Operation: Modify message\n\n**Endpoint:** `POST /threads/{thread_id}/messages/{message_id}`\n\n**Tags:** Assistants\n\n\n**Description:**\nModifies a message.\n\n\n**Parameters:**\n\n- **`thread_id`** (path, required, string): The ID of the thread to which this message belongs.\n\n- **`message_id`** (path, required, string): The ID of the message to modify.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `metadata` (N/A): No description.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "modifyMessage",
      "path": "/threads/{thread_id}/messages/{message_id}",
      "method": "POST",
      "summary": "Modify message",
      "tags": [
        "Assistants"
      ]
    }
  },
  {
    "content": "# Operation: Delete message\n\n**Endpoint:** `DELETE /threads/{thread_id}/messages/{message_id}`\n\n**Tags:** Assistants\n\n\n**Description:**\nDeletes a message.\n\n\n**Parameters:**\n\n- **`thread_id`** (path, required, string): The ID of the thread to which this message belongs.\n\n- **`message_id`** (path, required, string): The ID of the message to delete.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "deleteMessage",
      "path": "/threads/{thread_id}/messages/{message_id}",
      "method": "DELETE",
      "summary": "Delete message",
      "tags": [
        "Assistants"
      ]
    }
  },
  {
    "content": "# Operation: List runs\n\n**Endpoint:** `GET /threads/{thread_id}/runs`\n\n**Tags:** Assistants\n\n\n**Description:**\nReturns a list of runs belonging to a thread.\n\n\n**Parameters:**\n\n- **`thread_id`** (path, required, string): The ID of the thread the run belongs to.\n\n- **`limit`** (query, optional, integer): A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n\n- **`order`** (query, optional, string): Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n\n- **`after`** (query, optional, string): A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n\n- **`before`** (query, optional, string): A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "listRuns",
      "path": "/threads/{thread_id}/runs",
      "method": "GET",
      "summary": "List runs",
      "tags": [
        "Assistants"
      ]
    }
  },
  {
    "content": "# Operation: Retrieve run\n\n**Endpoint:** `GET /threads/{thread_id}/runs/{run_id}`\n\n**Tags:** Assistants\n\n\n**Description:**\nRetrieves a run.\n\n\n**Parameters:**\n\n- **`thread_id`** (path, required, string): The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) that was run.\n\n- **`run_id`** (path, required, string): The ID of the run to retrieve.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "getRun",
      "path": "/threads/{thread_id}/runs/{run_id}",
      "method": "GET",
      "summary": "Retrieve run",
      "tags": [
        "Assistants"
      ]
    }
  },
  {
    "content": "# Operation: Modify run\n\n**Endpoint:** `POST /threads/{thread_id}/runs/{run_id}`\n\n**Tags:** Assistants\n\n\n**Description:**\nModifies a run.\n\n\n**Parameters:**\n\n- **`thread_id`** (path, required, string): The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) that was run.\n\n- **`run_id`** (path, required, string): The ID of the run to modify.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `metadata` (N/A): No description.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "modifyRun",
      "path": "/threads/{thread_id}/runs/{run_id}",
      "method": "POST",
      "summary": "Modify run",
      "tags": [
        "Assistants"
      ]
    }
  },
  {
    "content": "# Operation: Cancel a run\n\n**Endpoint:** `POST /threads/{thread_id}/runs/{run_id}/cancel`\n\n**Tags:** Assistants\n\n\n**Description:**\nCancels a run that is `in_progress`.\n\n\n**Parameters:**\n\n- **`thread_id`** (path, required, string): The ID of the thread to which this run belongs.\n\n- **`run_id`** (path, required, string): The ID of the run to cancel.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "cancelRun",
      "path": "/threads/{thread_id}/runs/{run_id}/cancel",
      "method": "POST",
      "summary": "Cancel a run",
      "tags": [
        "Assistants"
      ]
    }
  },
  {
    "content": "# Operation: List run steps\n\n**Endpoint:** `GET /threads/{thread_id}/runs/{run_id}/steps`\n\n**Tags:** Assistants\n\n\n**Description:**\nReturns a list of run steps belonging to a run.\n\n\n**Parameters:**\n\n- **`thread_id`** (path, required, string): The ID of the thread the run and run steps belong to.\n\n- **`run_id`** (path, required, string): The ID of the run the run steps belong to.\n\n- **`limit`** (query, optional, integer): A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n\n- **`order`** (query, optional, string): Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n\n- **`after`** (query, optional, string): A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n\n- **`before`** (query, optional, string): A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n\n- **`include[]`** (query, optional, array): A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content. See the [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "listRunSteps",
      "path": "/threads/{thread_id}/runs/{run_id}/steps",
      "method": "GET",
      "summary": "List run steps",
      "tags": [
        "Assistants"
      ]
    }
  },
  {
    "content": "# Operation: Retrieve run step\n\n**Endpoint:** `GET /threads/{thread_id}/runs/{run_id}/steps/{step_id}`\n\n**Tags:** Assistants\n\n\n**Description:**\nRetrieves a run step.\n\n\n**Parameters:**\n\n- **`thread_id`** (path, required, string): The ID of the thread to which the run and run step belongs.\n\n- **`run_id`** (path, required, string): The ID of the run to which the run step belongs.\n\n- **`step_id`** (path, required, string): The ID of the run step to retrieve.\n\n- **`include[]`** (query, optional, array): A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content. See the [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "getRunStep",
      "path": "/threads/{thread_id}/runs/{run_id}/steps/{step_id}",
      "method": "GET",
      "summary": "Retrieve run step",
      "tags": [
        "Assistants"
      ]
    }
  },
  {
    "content": "# Operation: Submit tool outputs to run\n\n**Endpoint:** `POST /threads/{thread_id}/runs/{run_id}/submit_tool_outputs`\n\n**Tags:** Assistants\n\n\n**Description:**\nWhen a run has the `status: \"requires_action\"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.\n\n\n**Parameters:**\n\n- **`thread_id`** (path, required, string): The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) to which this run belongs.\n\n- **`run_id`** (path, required, string): The ID of the run that requires the tool output submission.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `tool_outputs` (array): A list of tools for which the outputs are being submitted.\n- `stream` (boolean): If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n**Curl:**\n```curl\ncurl https://api.openai.com/v1/threads/thread_123/runs/run_123/submit_tool_outputs \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"OpenAI-Beta: assistants=v2\" \\\n  -d '{\n    \"tool_outputs\": [\n      {\n        \"tool_call_id\": \"call_001\",\n        \"output\": \"70 degrees and sunny.\"\n      }\n    ]\n  }'\n```\n\n\n**Python:**\n```python\nfrom openai import OpenAI\n\nclient = OpenAI(\n    api_key=\"My API Key\",\n)\nrun = client.beta.threads.runs.submit_tool_outputs(\n    run_id=\"run_id\",\n    thread_id=\"thread_id\",\n    tool_outputs=[{}],\n)\nprint(run.id)\n```\n\n\n**Node.js:**\n```javascript\nimport OpenAI from 'openai';\n\nconst client = new OpenAI({\n  apiKey: 'My API Key',\n});\n\nconst run = await client.beta.threads.runs.submitToolOutputs('run_id', {\n  thread_id: 'thread_id',\n  tool_outputs: [{}],\n});\n\nconsole.log(run.id);\n```\n\n\n**Go:**\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/openai/openai-go\"\n  \"github.com/openai/openai-go/option\"\n)\n\nfunc main() {\n  client := openai.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  run, err := client.Beta.Threads.Runs.SubmitToolOutputs(\n    context.TODO(),\n    \"thread_id\",\n    \"run_id\",\n    openai.BetaThreadRunSubmitToolOutputsParams{\n      ToolOutputs: []openai.BetaThreadRunSubmitToolOutputsParamsToolOutput{openai.BetaThreadRunSubmitToolOutputsParamsToolOutput{\n\n      }},\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", run.ID)\n}\n```\n\n\n**Java:**\n```java\npackage com.openai.example;\n\nimport com.openai.client.OpenAIClient;\nimport com.openai.client.okhttp.OpenAIOkHttpClient;\nimport com.openai.models.beta.threads.runs.Run;\nimport com.openai.models.beta.threads.runs.RunSubmitToolOutputsParams;\n\npublic final class Main {\n    private Main() {}\n\n    public static void main(String[] args) {\n        OpenAIClient client = OpenAIOkHttpClient.fromEnv();\n\n        RunSubmitToolOutputsParams params = RunSubmitToolOutputsParams.builder()\n            .threadId(\"thread_id\")\n            .runId(\"run_id\")\n            .addToolOutput(RunSubmitToolOutputsParams.ToolOutput.builder().build())\n            .build();\n        Run run = client.beta().threads().runs().submitToolOutputs(params);\n    }\n}\n```\n\n\n**Ruby:**\n```ruby\nrequire \"openai\"\n\nopenai = OpenAI::Client.new(api_key: \"My API Key\")\n\nrun = openai.beta.threads.runs.submit_tool_outputs(\"run_id\", thread_id: \"thread_id\", tool_outputs: [{}])\n\nputs(run)\n```\n\n\n**Curl:**\n```curl\ncurl https://api.openai.com/v1/threads/thread_123/runs/run_123/submit_tool_outputs \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"OpenAI-Beta: assistants=v2\" \\\n  -d '{\n    \"tool_outputs\": [\n      {\n        \"tool_call_id\": \"call_001\",\n        \"output\": \"70 degrees and sunny.\"\n      }\n    ],\n    \"stream\": true\n  }'\n```\n\n\n**Python:**\n```python\nfrom openai import OpenAI\n\nclient = OpenAI(\n    api_key=\"My API Key\",\n)\nrun = client.beta.threads.runs.submit_tool_outputs(\n    run_id=\"run_id\",\n    thread_id=\"thread_id\",\n    tool_outputs=[{}],\n)\nprint(run.id)\n```\n\n\n**Node.js:**\n```javascript\nimport OpenAI from 'openai';\n\nconst client = new OpenAI({\n  apiKey: 'My API Key',\n});\n\nconst run = await client.beta.threads.runs.submitToolOutputs('run_id', {\n  thread_id: 'thread_id',\n  tool_outputs: [{}],\n});\n\nconsole.log(run.id);\n```\n\n\n**Go:**\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/openai/openai-go\"\n  \"github.com/openai/openai-go/option\"\n)\n\nfunc main() {\n  client := openai.NewClient(\n    option.WithAPIKey(\"My API Key\"),\n  )\n  run, err := client.Beta.Threads.Runs.SubmitToolOutputs(\n    context.TODO(),\n    \"thread_id\",\n    \"run_id\",\n    openai.BetaThreadRunSubmitToolOutputsParams{\n      ToolOutputs: []openai.BetaThreadRunSubmitToolOutputsParamsToolOutput{openai.BetaThreadRunSubmitToolOutputsParamsToolOutput{\n\n      }},\n    },\n  )\n  if err != nil {\n    panic(err.Error())\n  }\n  fmt.Printf(\"%+v\\n\", run.ID)\n}\n```\n\n\n**Java:**\n```java\npackage com.openai.example;\n\nimport com.openai.client.OpenAIClient;\nimport com.openai.client.okhttp.OpenAIOkHttpClient;\nimport com.openai.models.beta.threads.runs.Run;\nimport com.openai.models.beta.threads.runs.RunSubmitToolOutputsParams;\n\npublic final class Main {\n    private Main() {}\n\n    public static void main(String[] args) {\n        OpenAIClient client = OpenAIOkHttpClient.fromEnv();\n\n        RunSubmitToolOutputsParams params = RunSubmitToolOutputsParams.builder()\n            .threadId(\"thread_id\")\n            .runId(\"run_id\")\n            .addToolOutput(RunSubmitToolOutputsParams.ToolOutput.builder().build())\n            .build();\n        Run run = client.beta().threads().runs().submitToolOutputs(params);\n    }\n}\n```\n\n\n**Ruby:**\n```ruby\nrequire \"openai\"\n\nopenai = OpenAI::Client.new(api_key: \"My API Key\")\n\nrun = openai.beta.threads.runs.submit_tool_outputs(\"run_id\", thread_id: \"thread_id\", tool_outputs: [{}])\n\nputs(run)\n```",
    "metadata": {
      "operationId": "submitToolOuputsToRun",
      "path": "/threads/{thread_id}/runs/{run_id}/submit_tool_outputs",
      "method": "POST",
      "summary": "Submit tool outputs to run",
      "tags": [
        "Assistants"
      ]
    }
  },
  {
    "content": "# Operation: Create upload\n\n**Endpoint:** `POST /uploads`\n\n**Tags:** Uploads\n\n\n**Description:**\nCreates an intermediate [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object\nthat you can add [Parts](https://platform.openai.com/docs/api-reference/uploads/part-object) to.\nCurrently, an Upload can accept at most 8 GB in total and expires after an\nhour after you create it.\n\nOnce you complete the Upload, we will create a\n[File](https://platform.openai.com/docs/api-reference/files/object) object that contains all the parts\nyou uploaded. This File is usable in the rest of our platform as a regular\nFile object.\n\nFor certain `purpose` values, the correct `mime_type` must be specified. \nPlease refer to documentation for the \n[supported MIME types for your use case](https://platform.openai.com/docs/assistants/tools/file-search#supported-files).\n\nFor guidance on the proper filename extensions for each purpose, please\nfollow the documentation on [creating a\nFile](https://platform.openai.com/docs/api-reference/files/create).\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `filename` (string): The name of the file to upload.\n- `purpose` (string): The intended purpose of the uploaded file. See the [documentation on File purposes](https://platform.openai.com/docs/api-reference/files/create#files-create-purpose).\n- `bytes` (integer): The number of bytes in the file you are uploading.\n- `mime_type` (string): The MIME type of the file. This must fall within the supported MIME types for your file purpose. See the supported MIME types for assistants and vision.\n- `expires_after` (N/A): No description.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "createUpload",
      "path": "/uploads",
      "method": "POST",
      "summary": "Create upload",
      "tags": [
        "Uploads"
      ]
    }
  },
  {
    "content": "# Operation: Cancel upload\n\n**Endpoint:** `POST /uploads/{upload_id}/cancel`\n\n**Tags:** Uploads\n\n\n**Description:**\nCancels the Upload. No Parts may be added after an Upload is cancelled.\n\n\n**Parameters:**\n\n- **`upload_id`** (path, required, string): The ID of the Upload.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "cancelUpload",
      "path": "/uploads/{upload_id}/cancel",
      "method": "POST",
      "summary": "Cancel upload",
      "tags": [
        "Uploads"
      ]
    }
  },
  {
    "content": "# Operation: Complete upload\n\n**Endpoint:** `POST /uploads/{upload_id}/complete`\n\n**Tags:** Uploads\n\n\n**Description:**\nCompletes the [Upload](https://platform.openai.com/docs/api-reference/uploads/object). \n\nWithin the returned Upload object, there is a nested [File](https://platform.openai.com/docs/api-reference/files/object) object that is ready to use in the rest of the platform.\n\nYou can specify the order of the Parts by passing in an ordered list of the Part IDs.\n\nThe number of bytes uploaded upon completion must match the number of bytes initially specified when creating the Upload object. No Parts may be added after an Upload is completed.\n\n\n**Parameters:**\n\n- **`upload_id`** (path, required, string): The ID of the Upload.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `part_ids` (array): The ordered list of Part IDs.\n- `md5` (string): The optional md5 checksum for the file contents to verify if the bytes uploaded matches what you expect.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "completeUpload",
      "path": "/uploads/{upload_id}/complete",
      "method": "POST",
      "summary": "Complete upload",
      "tags": [
        "Uploads"
      ]
    }
  },
  {
    "content": "# Operation: Add upload part\n\n**Endpoint:** `POST /uploads/{upload_id}/parts`\n\n**Tags:** Uploads\n\n\n**Description:**\nAdds a [Part](https://platform.openai.com/docs/api-reference/uploads/part-object) to an [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object. A Part represents a chunk of bytes from the file you are trying to upload. \n\nEach Part can be at most 64 MB, and you can add Parts until you hit the Upload maximum of 8 GB.\n\nIt is possible to add multiple Parts in parallel. You can decide the intended order of the Parts when you [complete the Upload](https://platform.openai.com/docs/api-reference/uploads/complete).\n\n\n**Parameters:**\n\n- **`upload_id`** (path, required, string): The ID of the Upload.\n\n\n**Request Body:**\n\nThe request body is a `multipart/form-data` object with the following key properties:\n- `data` (string): The chunk of bytes for this Part.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "addUploadPart",
      "path": "/uploads/{upload_id}/parts",
      "method": "POST",
      "summary": "Add upload part",
      "tags": [
        "Uploads"
      ]
    }
  },
  {
    "content": "# Operation: List vector stores\n\n**Endpoint:** `GET /vector_stores`\n\n**Tags:** Vector stores\n\n\n**Description:**\nReturns a list of vector stores.\n\n\n**Parameters:**\n\n- **`limit`** (query, optional, integer): A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n\n- **`order`** (query, optional, string): Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n\n- **`after`** (query, optional, string): A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n\n- **`before`** (query, optional, string): A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "listVectorStores",
      "path": "/vector_stores",
      "method": "GET",
      "summary": "List vector stores",
      "tags": [
        "Vector stores"
      ]
    }
  },
  {
    "content": "# Operation: Create vector store\n\n**Endpoint:** `POST /vector_stores`\n\n**Tags:** Vector stores\n\n\n**Description:**\nCreate a vector store.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `file_ids` (array): A list of [File](https://platform.openai.com/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files.\n- `name` (string): The name of the vector store.\n- `expires_after` (N/A): No description.\n- `chunking_strategy` (N/A): No description.\n- `metadata` (N/A): No description.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "createVectorStore",
      "path": "/vector_stores",
      "method": "POST",
      "summary": "Create vector store",
      "tags": [
        "Vector stores"
      ]
    }
  },
  {
    "content": "# Operation: Retrieve vector store\n\n**Endpoint:** `GET /vector_stores/{vector_store_id}`\n\n**Tags:** Vector stores\n\n\n**Description:**\nRetrieves a vector store.\n\n\n**Parameters:**\n\n- **`vector_store_id`** (path, required, string): The ID of the vector store to retrieve.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "getVectorStore",
      "path": "/vector_stores/{vector_store_id}",
      "method": "GET",
      "summary": "Retrieve vector store",
      "tags": [
        "Vector stores"
      ]
    }
  },
  {
    "content": "# Operation: Modify vector store\n\n**Endpoint:** `POST /vector_stores/{vector_store_id}`\n\n**Tags:** Vector stores\n\n\n**Description:**\nModifies a vector store.\n\n\n**Parameters:**\n\n- **`vector_store_id`** (path, required, string): The ID of the vector store to modify.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `name` (string): The name of the vector store.\n- `expires_after` (N/A): No description.\n- `metadata` (N/A): No description.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "modifyVectorStore",
      "path": "/vector_stores/{vector_store_id}",
      "method": "POST",
      "summary": "Modify vector store",
      "tags": [
        "Vector stores"
      ]
    }
  },
  {
    "content": "# Operation: Delete vector store\n\n**Endpoint:** `DELETE /vector_stores/{vector_store_id}`\n\n**Tags:** Vector stores\n\n\n**Description:**\nDelete a vector store.\n\n\n**Parameters:**\n\n- **`vector_store_id`** (path, required, string): The ID of the vector store to delete.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "deleteVectorStore",
      "path": "/vector_stores/{vector_store_id}",
      "method": "DELETE",
      "summary": "Delete vector store",
      "tags": [
        "Vector stores"
      ]
    }
  },
  {
    "content": "# Operation: Create vector store file batch\n\n**Endpoint:** `POST /vector_stores/{vector_store_id}/file_batches`\n\n**Tags:** Vector stores\n\n\n**Description:**\nCreate a vector store file batch.\n\n\n**Parameters:**\n\n- **`vector_store_id`** (path, required, string): The ID of the vector store for which to create a File Batch.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `file_ids` (array): A list of [File](https://platform.openai.com/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files.\n- `chunking_strategy` (N/A): No description.\n- `attributes` (N/A): No description.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "createVectorStoreFileBatch",
      "path": "/vector_stores/{vector_store_id}/file_batches",
      "method": "POST",
      "summary": "Create vector store file batch",
      "tags": [
        "Vector stores"
      ]
    }
  },
  {
    "content": "# Operation: Retrieve vector store file batch\n\n**Endpoint:** `GET /vector_stores/{vector_store_id}/file_batches/{batch_id}`\n\n**Tags:** Vector stores\n\n\n**Description:**\nRetrieves a vector store file batch.\n\n\n**Parameters:**\n\n- **`vector_store_id`** (path, required, string): The ID of the vector store that the file batch belongs to.\n\n- **`batch_id`** (path, required, string): The ID of the file batch being retrieved.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "getVectorStoreFileBatch",
      "path": "/vector_stores/{vector_store_id}/file_batches/{batch_id}",
      "method": "GET",
      "summary": "Retrieve vector store file batch",
      "tags": [
        "Vector stores"
      ]
    }
  },
  {
    "content": "# Operation: Cancel vector store file batch\n\n**Endpoint:** `POST /vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel`\n\n**Tags:** Vector stores\n\n\n**Description:**\nCancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.\n\n\n**Parameters:**\n\n- **`vector_store_id`** (path, required, string): The ID of the vector store that the file batch belongs to.\n\n- **`batch_id`** (path, required, string): The ID of the file batch to cancel.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "cancelVectorStoreFileBatch",
      "path": "/vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel",
      "method": "POST",
      "summary": "Cancel vector store file batch",
      "tags": [
        "Vector stores"
      ]
    }
  },
  {
    "content": "# Operation: List vector store files in a batch\n\n**Endpoint:** `GET /vector_stores/{vector_store_id}/file_batches/{batch_id}/files`\n\n**Tags:** Vector stores\n\n\n**Description:**\nReturns a list of vector store files in a batch.\n\n\n**Parameters:**\n\n- **`vector_store_id`** (path, required, string): The ID of the vector store that the files belong to.\n\n- **`batch_id`** (path, required, string): The ID of the file batch that the files belong to.\n\n- **`limit`** (query, optional, integer): A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n\n- **`order`** (query, optional, string): Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n\n- **`after`** (query, optional, string): A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n\n- **`before`** (query, optional, string): A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n\n- **`filter`** (query, optional, string): Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "listFilesInVectorStoreBatch",
      "path": "/vector_stores/{vector_store_id}/file_batches/{batch_id}/files",
      "method": "GET",
      "summary": "List vector store files in a batch",
      "tags": [
        "Vector stores"
      ]
    }
  },
  {
    "content": "# Operation: List vector store files\n\n**Endpoint:** `GET /vector_stores/{vector_store_id}/files`\n\n**Tags:** Vector stores\n\n\n**Description:**\nReturns a list of vector store files.\n\n\n**Parameters:**\n\n- **`vector_store_id`** (path, required, string): The ID of the vector store that the files belong to.\n\n- **`limit`** (query, optional, integer): A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n\n- **`order`** (query, optional, string): Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n\n- **`after`** (query, optional, string): A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n\n- **`before`** (query, optional, string): A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n\n- **`filter`** (query, optional, string): Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "listVectorStoreFiles",
      "path": "/vector_stores/{vector_store_id}/files",
      "method": "GET",
      "summary": "List vector store files",
      "tags": [
        "Vector stores"
      ]
    }
  },
  {
    "content": "# Operation: Create vector store file\n\n**Endpoint:** `POST /vector_stores/{vector_store_id}/files`\n\n**Tags:** Vector stores\n\n\n**Description:**\nCreate a vector store file by attaching a [File](https://platform.openai.com/docs/api-reference/files) to a [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object).\n\n\n**Parameters:**\n\n- **`vector_store_id`** (path, required, string): The ID of the vector store for which to create a File.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `file_id` (string): A [File](https://platform.openai.com/docs/api-reference/files) ID that the vector store should use. Useful for tools like `file_search` that can access files.\n- `chunking_strategy` (N/A): No description.\n- `attributes` (N/A): No description.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "createVectorStoreFile",
      "path": "/vector_stores/{vector_store_id}/files",
      "method": "POST",
      "summary": "Create vector store file",
      "tags": [
        "Vector stores"
      ]
    }
  },
  {
    "content": "# Operation: Retrieve vector store file\n\n**Endpoint:** `GET /vector_stores/{vector_store_id}/files/{file_id}`\n\n**Tags:** Vector stores\n\n\n**Description:**\nRetrieves a vector store file.\n\n\n**Parameters:**\n\n- **`vector_store_id`** (path, required, string): The ID of the vector store that the file belongs to.\n\n- **`file_id`** (path, required, string): The ID of the file being retrieved.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "getVectorStoreFile",
      "path": "/vector_stores/{vector_store_id}/files/{file_id}",
      "method": "GET",
      "summary": "Retrieve vector store file",
      "tags": [
        "Vector stores"
      ]
    }
  },
  {
    "content": "# Operation: Delete vector store file\n\n**Endpoint:** `DELETE /vector_stores/{vector_store_id}/files/{file_id}`\n\n**Tags:** Vector stores\n\n\n**Description:**\nDelete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](https://platform.openai.com/docs/api-reference/files/delete) endpoint.\n\n\n**Parameters:**\n\n- **`vector_store_id`** (path, required, string): The ID of the vector store that the file belongs to.\n\n- **`file_id`** (path, required, string): The ID of the file to delete.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "deleteVectorStoreFile",
      "path": "/vector_stores/{vector_store_id}/files/{file_id}",
      "method": "DELETE",
      "summary": "Delete vector store file",
      "tags": [
        "Vector stores"
      ]
    }
  },
  {
    "content": "# Operation: Update vector store file attributes\n\n**Endpoint:** `POST /vector_stores/{vector_store_id}/files/{file_id}`\n\n**Tags:** Vector stores\n\n\n**Description:**\nUpdate attributes on a vector store file.\n\n\n**Parameters:**\n\n- **`vector_store_id`** (path, required, string): The ID of the vector store the file belongs to.\n\n- **`file_id`** (path, required, string): The ID of the file to update attributes.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `attributes` (N/A): No description.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "updateVectorStoreFileAttributes",
      "path": "/vector_stores/{vector_store_id}/files/{file_id}",
      "method": "POST",
      "summary": "Update vector store file attributes",
      "tags": [
        "Vector stores"
      ]
    }
  },
  {
    "content": "# Operation: Retrieve vector store file content\n\n**Endpoint:** `GET /vector_stores/{vector_store_id}/files/{file_id}/content`\n\n**Tags:** Vector stores\n\n\n**Description:**\nRetrieve the parsed contents of a vector store file.\n\n\n**Parameters:**\n\n- **`vector_store_id`** (path, required, string): The ID of the vector store.\n\n- **`file_id`** (path, required, string): The ID of the file within the vector store.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "retrieveVectorStoreFileContent",
      "path": "/vector_stores/{vector_store_id}/files/{file_id}/content",
      "method": "GET",
      "summary": "Retrieve vector store file content",
      "tags": [
        "Vector stores"
      ]
    }
  },
  {
    "content": "# Operation: Search vector store\n\n**Endpoint:** `POST /vector_stores/{vector_store_id}/search`\n\n**Tags:** Vector stores\n\n\n**Description:**\nSearch a vector store for relevant chunks based on a query and file attributes filter.\n\n\n**Parameters:**\n\n- **`vector_store_id`** (path, required, string): The ID of the vector store to search.\n\n\n**Request Body:**\n\nThe request body is a `application/json` object with the following key properties:\n- `query` (N/A): A query string for a search\n- `rewrite_query` (boolean): Whether to rewrite the natural language query for vector search.\n- `max_num_results` (integer): The maximum number of results to return. This number should be between 1 and 50 inclusive.\n- `filters` (N/A): A filter to apply based on file attributes.\n- `ranking_options` (object): Ranking options for search.\n\n\n**Successful Response (200 OK):**\nOK\n\n\n**Code Examples:**\n\n\n```\nresponse\n```\n\n\n```\nrequest\n```",
    "metadata": {
      "operationId": "searchVectorStore",
      "path": "/vector_stores/{vector_store_id}/search",
      "method": "POST",
      "summary": "Search vector store",
      "tags": [
        "Vector stores"
      ]
    }
  }
]